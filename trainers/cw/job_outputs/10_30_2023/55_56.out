Mode:  cw
Testing:  1
File:  train56
Description:  new callback
Output File:  cw/job_outputs/56.out
Tensorflow Version: 2.8.0
Num GPUs Available:  1
Collecting Variables...
All variables have been collected.
../cache/
cw
train56
Description: new callback
-----------------------
Job id is 1.
- Loading Perch.
21 Perch audios have been loaded.
- Loading Icbhi.
17 Icbhi audios have been loaded.
- Loading Antwerp.
7 Antwerp audios have been loaded.
- Preparing Perch.
20 Perch groups of audio chunks (by filename or patients) have been prepared.
- Preparing Icbhi.
10 Icbhi groups of audio chunks (by filename or patients) have been prepared.
- Preparing Antwerp.
4 Antwerp groups of audio chunks (by filename or patients) have been prepared.
--- Samples are being split into training/val groups and de-grouped by patient ---
--- Perch training dataset went from 0 to 10 elements, with 6 none's, 1 crakles, 1 wheezes and 2 both ---
--- Perch Validation dataset contains 11 elements, with 6 none, 2 crackles, 2 wheezes and 1 both ---
--- Icbhi training dataset went from 0 to 27 elements, with 15 none's, 10 crakles, 1 wheezes and 1 both ---
--- Icbhi Validation dataset contains 24 elements, with 12 none, 5 crackles, 3 wheezes and 4 both ---
--- Antwerp training dataset went from 0 to 27 elements, with 0 none's, 0 crakles, 27 wheezes and 0 both ---
--- Antwerp Validation dataset contains 10 elements, with 0 none, 5 crackles, 0 wheezes and 5 both ---
0
0
0
0
-----------------------
--- Final training dataset went from 0 to 64 elements, with 21 none's, 11 crakles, 29 wheezes and 3 both ---
--- Final Validation dataset contains 45 elements, with 18 none, 12 crackles, 5 wheezes and 10 both ---
Model: "leaf_mixednet_model"
______________________________________________________________________________________________________________
 Layer (type)                                    Output Shape                                Param #          
==============================================================================================================
 leaf (Leaf)                                     multiple                                    560              
                                                                                                              
 sequential (Sequential)                         (None, 2)                                   105952           
                                                                                                              
==============================================================================================================
Total params: 106,512
Trainable params: 105,456
Non-trainable params: 1,056
______________________________________________________________________________________________________________
Target metric is avg_accuracy
Epoch 1/2
Validation cm: [[18  0  0  0]
 [12  0  0  0]
 [ 5  0  0  0]
 [10  0  0  0]]
Validation normalized_cm: [[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Validation acc: 0.4
Validation class_accuracies: [1.0, 0.0, 0.0, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 1
-- New best results were achieved. --
4/4 - 26s - loss: 0.6521 - accuracy: 0.8125 - 26s/epoch - 7s/step
Epoch 2/2
Validation cm: [[ 0  0 18  0]
 [ 0  0 12  0]
 [ 0  0  5  0]
 [ 0  0 10  0]]
Validation normalized_cm: [[0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]]
Validation acc: 0.1111111111111111
Validation class_accuracies: [0.0, 0.0, 1.0, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 2
The validation tracker metric at 0.25 hasn't increased by 0 in 1 epochs
-- New best results were achieved. --
4/4 - 19s - loss: 0.4161 - accuracy: 0.8906 - 19s/epoch - 5s/step
----------------------------------
The best metrics for this job are: 

Best avg_accuracy: 0.25
Best cm: [[ 0  0 18  0]
 [ 0  0 12  0]
 [ 0  0  5  0]
 [ 0  0 10  0]]
Best normalized_cm: [[0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]]
Best acc: 0.1111111111111111
Best class_accuracies: [0.0, 0.0, 1.0, 0.0]
Best precision: None
Best recall: None
Best f1: None
Best roc_auc: None
Best one_indexed_epoch: 2
avg_accuracy
model
cm
normalized_cm
acc
class_accuracies
precision
recall
f1
roc_auc
one_indexed_epoch
Initial weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[3.682e-02, 1.919e+02],
       [3.682e-02, 9.594e+01],
       [4.909e-02, 1.919e+02],
       [6.136e-02, 1.919e+02],
       [7.363e-02, 1.919e+02],
       [8.590e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [1.104e-01, 9.594e+01],
       [1.227e-01, 9.594e+01],
       [1.350e-01, 9.594e+01],
       [1.473e-01, 9.594e+01],
       [1.595e-01, 9.594e+01],
       [1.841e-01, 9.594e+01],
       [1.963e-01, 9.594e+01],
       [2.086e-01, 9.594e+01],
       [2.209e-01, 1.919e+02],
       [2.332e-01, 9.594e+01],
       [2.454e-01, 9.594e+01],
       [2.700e-01, 9.594e+01],
       [2.823e-01, 9.594e+01],
       [2.945e-01, 9.594e+01],
       [3.191e-01, 9.594e+01],
       [3.313e-01, 9.594e+01],
       [3.559e-01, 6.396e+01],
       [3.682e-01, 9.594e+01],
       [3.927e-01, 6.396e+01],
       [4.172e-01, 9.594e+01],
       [4.295e-01, 6.396e+01],
       [4.541e-01, 6.396e+01],
       [4.786e-01, 6.396e+01],
       [5.031e-01, 6.396e+01],
       [5.277e-01, 6.396e+01],
       [5.522e-01, 6.396e+01],
       [5.768e-01, 6.396e+01],
       [6.013e-01, 6.396e+01],
       [6.259e-01, 6.396e+01],
       [6.504e-01, 6.396e+01],
       [6.750e-01, 4.797e+01],
       [7.118e-01, 4.797e+01],
       [7.363e-01, 4.797e+01],
       [7.731e-01, 4.797e+01],
       [7.977e-01, 4.797e+01],
       [8.345e-01, 4.797e+01],
       [8.713e-01, 4.797e+01],
       [8.958e-01, 4.797e+01],
       [9.327e-01, 4.797e+01],
       [9.695e-01, 3.838e+01],
       [1.006e+00, 3.838e+01],
       [1.055e+00, 3.838e+01],
       [1.092e+00, 3.838e+01],
       [1.129e+00, 3.838e+01],
       [1.178e+00, 3.198e+01],
       [1.215e+00, 3.198e+01],
       [1.264e+00, 3.838e+01],
       [1.313e+00, 3.198e+01],
       [1.362e+00, 3.198e+01],
       [1.411e+00, 3.198e+01],
       [1.460e+00, 2.741e+01],
       [1.509e+00, 2.741e+01],
       [1.559e+00, 3.198e+01],
       [1.620e+00, 2.741e+01],
       [1.681e+00, 2.741e+01],
       [1.730e+00, 2.399e+01],
       [1.792e+00, 2.399e+01],
       [1.865e+00, 2.399e+01],
       [1.927e+00, 2.399e+01],
       [1.988e+00, 2.399e+01],
       [2.062e+00, 2.132e+01],
       [2.135e+00, 2.132e+01],
       [2.197e+00, 1.919e+01],
       [2.283e+00, 1.919e+01],
       [2.356e+00, 2.132e+01],
       [2.430e+00, 1.919e+01],
       [2.516e+00, 1.919e+01],
       [2.602e+00, 1.744e+01],
       [2.688e+00, 1.744e+01],
       [2.773e+00, 1.599e+01],
       [2.872e+00, 1.744e+01],
       [2.970e+00, 1.599e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96], dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04], dtype=float32)>]
Post training weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[3.682e-02, 1.919e+02],
       [3.682e-02, 9.594e+01],
       [4.909e-02, 1.919e+02],
       [6.136e-02, 1.919e+02],
       [7.363e-02, 1.919e+02],
       [8.590e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [1.104e-01, 9.594e+01],
       [1.227e-01, 9.594e+01],
       [1.350e-01, 9.594e+01],
       [1.473e-01, 9.594e+01],
       [1.595e-01, 9.594e+01],
       [1.841e-01, 9.594e+01],
       [1.963e-01, 9.594e+01],
       [2.086e-01, 9.594e+01],
       [2.209e-01, 1.919e+02],
       [2.332e-01, 9.594e+01],
       [2.454e-01, 9.594e+01],
       [2.700e-01, 9.594e+01],
       [2.823e-01, 9.594e+01],
       [2.945e-01, 9.594e+01],
       [3.191e-01, 9.594e+01],
       [3.313e-01, 9.594e+01],
       [3.559e-01, 6.396e+01],
       [3.682e-01, 9.594e+01],
       [3.927e-01, 6.396e+01],
       [4.172e-01, 9.594e+01],
       [4.295e-01, 6.396e+01],
       [4.541e-01, 6.396e+01],
       [4.786e-01, 6.396e+01],
       [5.031e-01, 6.396e+01],
       [5.277e-01, 6.396e+01],
       [5.522e-01, 6.396e+01],
       [5.768e-01, 6.396e+01],
       [6.013e-01, 6.396e+01],
       [6.259e-01, 6.396e+01],
       [6.504e-01, 6.396e+01],
       [6.750e-01, 4.797e+01],
       [7.118e-01, 4.797e+01],
       [7.363e-01, 4.797e+01],
       [7.731e-01, 4.797e+01],
       [7.977e-01, 4.797e+01],
       [8.345e-01, 4.797e+01],
       [8.713e-01, 4.797e+01],
       [8.958e-01, 4.797e+01],
       [9.327e-01, 4.797e+01],
       [9.695e-01, 3.838e+01],
       [1.006e+00, 3.838e+01],
       [1.055e+00, 3.838e+01],
       [1.092e+00, 3.838e+01],
       [1.129e+00, 3.838e+01],
       [1.178e+00, 3.198e+01],
       [1.215e+00, 3.198e+01],
       [1.264e+00, 3.838e+01],
       [1.313e+00, 3.198e+01],
       [1.362e+00, 3.198e+01],
       [1.411e+00, 3.198e+01],
       [1.460e+00, 2.741e+01],
       [1.509e+00, 2.741e+01],
       [1.559e+00, 3.198e+01],
       [1.620e+00, 2.741e+01],
       [1.681e+00, 2.741e+01],
       [1.730e+00, 2.399e+01],
       [1.792e+00, 2.399e+01],
       [1.865e+00, 2.399e+01],
       [1.927e+00, 2.399e+01],
       [1.988e+00, 2.399e+01],
       [2.062e+00, 2.132e+01],
       [2.135e+00, 2.132e+01],
       [2.197e+00, 1.919e+01],
       [2.283e+00, 1.919e+01],
       [2.356e+00, 2.132e+01],
       [2.430e+00, 1.919e+01],
       [2.516e+00, 1.919e+01],
       [2.602e+00, 1.744e+01],
       [2.688e+00, 1.744e+01],
       [2.773e+00, 1.599e+01],
       [2.872e+00, 1.744e+01],
       [2.970e+00, 1.599e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96], dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04], dtype=float32)>]/home/alirachidi/classification_algorithm/trainers/modules/main/global_helpers.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
  plt.show()
/home/alirachidi/classification_algorithm/trainers/modules/callbacks/visualizationCallback.py:32: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  print(np.array(self.model._frontend.weights) - np.array(self.first_weights))

Weight difference
[<tf.Tensor: shape=(80, 2), dtype=float32, numpy=
 array([[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]], dtype=float32)>
 <tf.Tensor: shape=(1, 1, 80, 1), dtype=float32, numpy=
 array([[[[0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.]]]], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>   ]
Tensorflow Version: 2.8.0
Num GPUs Available:  1
Collecting Variables...
All variables have been collected.
../cache/
cw
train55
Description: mel
-----------------------
Job id is 1.
- Loading Perch.
21 Perch audios have been loaded.
- Loading Icbhi.
17 Icbhi audios have been loaded.
- Loading Antwerp.
7 Antwerp audios have been loaded.
- Preparing Perch.
20 Perch groups of audio chunks (by filename or patients) have been prepared.
- Preparing Icbhi.
10 Icbhi groups of audio chunks (by filename or patients) have been prepared.
- Preparing Antwerp.
4 Antwerp groups of audio chunks (by filename or patients) have been prepared.
--- Samples are being split into training/val groups and de-grouped by patient ---
--- Perch training dataset went from 0 to 10 elements, with 6 none's, 1 crakles, 1 wheezes and 2 both ---
--- Perch Validation dataset contains 11 elements, with 6 none, 2 crackles, 2 wheezes and 1 both ---
--- Icbhi training dataset went from 0 to 27 elements, with 15 none's, 10 crakles, 1 wheezes and 1 both ---
--- Icbhi Validation dataset contains 24 elements, with 12 none, 5 crackles, 3 wheezes and 4 both ---
--- Antwerp training dataset went from 0 to 27 elements, with 0 none's, 0 crakles, 27 wheezes and 0 both ---
--- Antwerp Validation dataset contains 10 elements, with 0 none, 5 crackles, 0 wheezes and 5 both ---
0
0
0
0
-----------------------
--- Final training dataset went from 0 to 64 elements, with 21 none's, 11 crakles, 29 wheezes and 3 both ---
--- Final Validation dataset contains 45 elements, with 18 none, 12 crackles, 5 wheezes and 10 both ---
Model: "leaf_mixednet_model"
______________________________________________________________________________________________________________
 Layer (type)                                    Output Shape                                Param #          
==============================================================================================================
 mel_filterbanks (MelFilterbanks)                multiple                                    0                
                                                                                                              
 sequential (Sequential)                         (None, 2)                                   105952           
                                                                                                              
==============================================================================================================
Total params: 105,952
Trainable params: 105,456
Non-trainable params: 496
______________________________________________________________________________________________________________
Target metric is avg_accuracy
Epoch 1/2
Validation cm: [[18  0  0  0]
 [12  0  0  0]
 [ 5  0  0  0]
 [10  0  0  0]]
Validation normalized_cm: [[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Validation acc: 0.4
Validation class_accuracies: [1.0, 0.0, 0.0, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 1
-- New best results were achieved. --
4/4 - 14s - loss: 0.5678 - accuracy: 0.8125 - 14s/epoch - 4s/step
Epoch 2/2
Validation cm: [[18  0  0  0]
 [12  0  0  0]
 [ 5  0  0  0]
 [10  0  0  0]]
Validation normalized_cm: [[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Validation acc: 0.4
Validation class_accuracies: [1.0, 0.0, 0.0, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 2
The validation tracker metric at 0.25 hasn't increased by 0 in 1 epochs
-- New best results were achieved. --
4/4 - 8s - loss: 0.3572 - accuracy: 0.9375 - 8s/epoch - 2s/step
----------------------------------
The best metrics for this job are: 

Best avg_accuracy: 0.25
Best cm: [[18  0  0  0]
 [12  0  0  0]
 [ 5  0  0  0]
 [10  0  0  0]]
Best normalized_cm: [[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Best acc: 0.4
Best class_accuracies: [1.0, 0.0, 0.0, 0.0]
Best precision: None
Best recall: None
Best f1: None
Best roc_auc: None
Best one_indexed_epoch: 2
/home/alirachidi/classification_algorithm/trainers/modules/main/global_helpers.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
  plt.show()
avg_accuracy
model
cm
normalized_cm
acc
class_accuracies
precision
recall
f1
roc_auc
one_indexed_epoch
Initial weights
[]
Post training weights
[]
Weight difference
[]
Tensorflow Version: 2.8.0
Num GPUs Available:  1
Collecting Variables...
All variables have been collected.
../cache/
cw
train56
Description: untrainable leaf
-----------------------
Job id is 1.
- Loading Perch.
21 Perch audios have been loaded.
- Loading Icbhi.
17 Icbhi audios have been loaded.
- Loading Antwerp.
7 Antwerp audios have been loaded.
- Preparing Perch.
20 Perch groups of audio chunks (by filename or patients) have been prepared.
- Preparing Icbhi.
10 Icbhi groups of audio chunks (by filename or patients) have been prepared.
- Preparing Antwerp.
4 Antwerp groups of audio chunks (by filename or patients) have been prepared.
--- Samples are being split into training/val groups and de-grouped by patient ---
--- Perch training dataset went from 0 to 10 elements, with 6 none's, 1 crakles, 1 wheezes and 2 both ---
--- Perch Validation dataset contains 11 elements, with 6 none, 2 crackles, 2 wheezes and 1 both ---
--- Icbhi training dataset went from 0 to 27 elements, with 15 none's, 10 crakles, 1 wheezes and 1 both ---
--- Icbhi Validation dataset contains 24 elements, with 12 none, 5 crackles, 3 wheezes and 4 both ---
--- Antwerp training dataset went from 0 to 27 elements, with 0 none's, 0 crakles, 27 wheezes and 0 both ---
--- Antwerp Validation dataset contains 10 elements, with 0 none, 5 crackles, 0 wheezes and 5 both ---
0
0
0
0
-----------------------
--- Final training dataset went from 0 to 64 elements, with 21 none's, 11 crakles, 29 wheezes and 3 both ---
--- Final Validation dataset contains 45 elements, with 18 none, 12 crackles, 5 wheezes and 10 both ---
Model: "leaf_mixednet_model"
______________________________________________________________________________________________________________
 Layer (type)                                    Output Shape                                Param #          
==============================================================================================================
 leaf (Leaf)                                     multiple                                    560              
                                                                                                              
 sequential (Sequential)                         (None, 2)                                   105952           
                                                                                                              
==============================================================================================================
Total params: 106,512
Trainable params: 105,456
Non-trainable params: 1,056
______________________________________________________________________________________________________________
Target metric is avg_accuracy
Epoch 1/2
Validation cm: [[18  0  0  0]
 [12  0  0  0]
 [ 5  0  0  0]
 [10  0  0  0]]
Validation normalized_cm: [[1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]
 [1. 0. 0. 0.]]
Validation acc: 0.4
Validation class_accuracies: [1.0, 0.0, 0.0, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 1
-- New best results were achieved. --
4/4 - 26s - loss: 0.6521 - accuracy: 0.8125 - 26s/epoch - 6s/step
Epoch 2/2
Validation cm: [[ 0  0 18  0]
 [ 0  0 12  0]
 [ 0  0  5  0]
 [ 0  0 10  0]]
Validation normalized_cm: [[0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]]
Validation acc: 0.1111111111111111
Validation class_accuracies: [0.0, 0.0, 1.0, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 2
The validation tracker metric at 0.25 hasn't increased by 0 in 1 epochs
-- New best results were achieved. --
4/4 - 19s - loss: 0.4167 - accuracy: 0.8906 - 19s/epoch - 5s/step
----------------------------------
The best metrics for this job are: 

Best avg_accuracy: 0.25
Best cm: [[ 0  0 18  0]
 [ 0  0 12  0]
 [ 0  0  5  0]
 [ 0  0 10  0]]
Best normalized_cm: [[0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]
 [0. 0. 1. 0.]]
Best acc: 0.1111111111111111
Best class_accuracies: [0.0, 0.0, 1.0, 0.0]
Best precision: None
Best recall: None
Best f1: None
Best roc_auc: None
Best one_indexed_epoch: 2
avg_accuracy
model
cm
normalized_cm
acc
class_accuracies
precision
recall
f1
roc_auc
one_indexed_epoch
Initial weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[3.682e-02, 1.919e+02],
       [3.682e-02, 9.594e+01],
       [4.909e-02, 1.919e+02],
       [6.136e-02, 1.919e+02],
       [7.363e-02, 1.919e+02],
       [8.590e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [1.104e-01, 9.594e+01],
       [1.227e-01, 9.594e+01],
       [1.350e-01, 9.594e+01],
       [1.473e-01, 9.594e+01],
       [1.595e-01, 9.594e+01],
       [1.841e-01, 9.594e+01],
       [1.963e-01, 9.594e+01],
       [2.086e-01, 9.594e+01],
       [2.209e-01, 1.919e+02],
       [2.332e-01, 9.594e+01],
       [2.454e-01, 9.594e+01],
       [2.700e-01, 9.594e+01],
       [2.823e-01, 9.594e+01],
       [2.945e-01, 9.594e+01],
       [3.191e-01, 9.594e+01],
       [3.313e-01, 9.594e+01],
       [3.559e-01, 6.396e+01],
       [3.682e-01, 9.594e+01],
       [3.927e-01, 6.396e+01],
       [4.172e-01, 9.594e+01],
       [4.295e-01, 6.396e+01],
       [4.541e-01, 6.396e+01],
       [4.786e-01, 6.396e+01],
       [5.031e-01, 6.396e+01],
       [5.277e-01, 6.396e+01],
       [5.522e-01, 6.396e+01],
       [5.768e-01, 6.396e+01],
       [6.013e-01, 6.396e+01],
       [6.259e-01, 6.396e+01],
       [6.504e-01, 6.396e+01],
       [6.750e-01, 4.797e+01],
       [7.118e-01, 4.797e+01],
       [7.363e-01, 4.797e+01],
       [7.731e-01, 4.797e+01],
       [7.977e-01, 4.797e+01],
       [8.345e-01, 4.797e+01],
       [8.713e-01, 4.797e+01],
       [8.958e-01, 4.797e+01],
       [9.327e-01, 4.797e+01],
       [9.695e-01, 3.838e+01],
       [1.006e+00, 3.838e+01],
       [1.055e+00, 3.838e+01],
       [1.092e+00, 3.838e+01],
       [1.129e+00, 3.838e+01],
       [1.178e+00, 3.198e+01],
       [1.215e+00, 3.198e+01],
       [1.264e+00, 3.838e+01],
       [1.313e+00, 3.198e+01],
       [1.362e+00, 3.198e+01],
       [1.411e+00, 3.198e+01],
       [1.460e+00, 2.741e+01],
       [1.509e+00, 2.741e+01],
       [1.559e+00, 3.198e+01],
       [1.620e+00, 2.741e+01],
       [1.681e+00, 2.741e+01],
       [1.730e+00, 2.399e+01],
       [1.792e+00, 2.399e+01],
       [1.865e+00, 2.399e+01],
       [1.927e+00, 2.399e+01],
       [1.988e+00, 2.399e+01],
       [2.062e+00, 2.132e+01],
       [2.135e+00, 2.132e+01],
       [2.197e+00, 1.919e+01],
       [2.283e+00, 1.919e+01],
       [2.356e+00, 2.132e+01],
       [2.430e+00, 1.919e+01],
       [2.516e+00, 1.919e+01],
       [2.602e+00, 1.744e+01],
       [2.688e+00, 1.744e+01],
       [2.773e+00, 1.599e+01],
       [2.872e+00, 1.744e+01],
       [2.970e+00, 1.599e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96], dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04], dtype=float32)>]
Post training weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[3.682e-02, 1.919e+02],
       [3.682e-02, 9.594e+01],
       [4.909e-02, 1.919e+02],
       [6.136e-02, 1.919e+02],
       [7.363e-02, 1.919e+02],
       [8.590e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [9.817e-02, 9.594e+01],
       [1.104e-01, 9.594e+01],
       [1.227e-01, 9.594e+01],
       [1.350e-01, 9.594e+01],
       [1.473e-01, 9.594e+01],
       [1.595e-01, 9.594e+01],
       [1.841e-01, 9.594e+01],
       [1.963e-01, 9.594e+01],
       [2.086e-01, 9.594e+01],
       [2.209e-01, 1.919e+02],
       [2.332e-01, 9.594e+01],
       [2.454e-01, 9.594e+01],
       [2.700e-01, 9.594e+01],
       [2.823e-01, 9.594e+01],
       [2.945e-01, 9.594e+01],
       [3.191e-01, 9.594e+01],
       [3.313e-01, 9.594e+01],
       [3.559e-01, 6.396e+01],
       [3.682e-01, 9.594e+01],
       [3.927e-01, 6.396e+01],
       [4.172e-01, 9.594e+01],
       [4.295e-01, 6.396e+01],
       [4.541e-01, 6.396e+01],
       [4.786e-01, 6.396e+01],
       [5.031e-01, 6.396e+01],
       [5.277e-01, 6.396e+01],
       [5.522e-01, 6.396e+01],
       [5.768e-01, 6.396e+01],
       [6.013e-01, 6.396e+01],
       [6.259e-01, 6.396e+01],
       [6.504e-01, 6.396e+01],
       [6.750e-01, 4.797e+01],
       [7.118e-01, 4.797e+01],
       [7.363e-01, 4.797e+01],
       [7.731e-01, 4.797e+01],
       [7.977e-01, 4.797e+01],
       [8.345e-01, 4.797e+01],
       [8.713e-01, 4.797e+01],
       [8.958e-01, 4.797e+01],
       [9.327e-01, 4.797e+01],
       [9.695e-01, 3.838e+01],
       [1.006e+00, 3.838e+01],
       [1.055e+00, 3.838e+01],
       [1.092e+00, 3.838e+01],
       [1.129e+00, 3.838e+01],
       [1.178e+00, 3.198e+01],
       [1.215e+00, 3.198e+01],
       [1.264e+00, 3.838e+01],
       [1.313e+00, 3.198e+01],
       [1.362e+00, 3.198e+01],
       [1.411e+00, 3.198e+01],
       [1.460e+00, 2.741e+01],
       [1.509e+00, 2.741e+01],
       [1.559e+00, 3.198e+01],
       [1.620e+00, 2.741e+01],
       [1.681e+00, 2.741e+01],
       [1.730e+00, 2.399e+01],
       [1.792e+00, 2.399e+01],
       [1.865e+00, 2.399e+01],
       [1.927e+00, 2.399e+01],
       [1.988e+00, 2.399e+01],
       [2.062e+00, 2.132e+01],
       [2.135e+00, 2.132e+01],
       [2.197e+00, 1.919e+01],
       [2.283e+00, 1.919e+01],
       [2.356e+00, 2.132e+01],
       [2.430e+00, 1.919e+01],
       [2.516e+00, 1.919e+01],
       [2.602e+00, 1.744e+01],
       [2.688e+00, 1.744e+01],
       [2.773e+00, 1.599e+01],
       [2.872e+00, 1.744e+01],
       [2.970e+00, 1.599e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4],
         [0.4]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96,
       0.96, 0.96, 0.96], dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04,
       0.04, 0.04, 0.04], dtype=float32)>]/home/alirachidi/classification_algorithm/trainers/modules/main/global_helpers.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
  plt.show()
/home/alirachidi/classification_algorithm/trainers/modules/callbacks/visualizationCallback.py:32: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  print(np.array(self.model._frontend.weights) - np.array(self.first_weights))

Weight difference
[<tf.Tensor: shape=(80, 2), dtype=float32, numpy=
 array([[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]], dtype=float32)>
 <tf.Tensor: shape=(1, 1, 80, 1), dtype=float32, numpy=
 array([[[[0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.]]]], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>   ]
