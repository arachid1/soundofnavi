Tensorflow Version: 2.8.0
Num GPUs Available:  1
Collecting Variables...
All variables have been collected.
../cache/
cw
train74
Description: crackles/w with diff params + w/o mixing data + diff loss
-----------------------
Job id is 1.
- Loading Perch.
3278 Perch audios have been loaded.
- Loading Icbhi.
725 Icbhi audios have been loaded.
- Loading Antwerp.
131 Antwerp audios have been loaded.
- Preparing Perch.
862 Perch groups of audio chunks (by filename or patients) have been prepared.
- Preparing Icbhi.
112 Icbhi groups of audio chunks (by filename or patients) have been prepared.
- Preparing Antwerp.
15 Antwerp groups of audio chunks (by filename or patients) have been prepared.
--- Samples are being split into training/val groups and de-grouped by patient ---
--- Perch training dataset went from 0 to 2649 elements, with 2346 none's, 61 crakles, 186 wheezes and 56 both ---
--- Perch Validation dataset contains 629 elements, with 551 none, 12 crackles, 54 wheezes and 12 both ---
--- Icbhi training dataset went from 0 to 2040 elements, with 707 none's, 720 crakles, 285 wheezes and 327 both ---
--- Icbhi Validation dataset contains 299 elements, with 172 none, 70 crackles, 18 wheezes and 39 both ---
--- Antwerp training dataset went from 0 to 580 elements, with 82 none's, 16 crakles, 448 wheezes and 34 both ---
--- Antwerp Validation dataset contains 111 elements, with 17 none, 10 crackles, 5 wheezes and 79 both ---
0
0
0
0
-----------------------
--- Final training dataset went from 0 to 5269 elements, with 3135 none's, 797 crakles, 919 wheezes and 417 both ---
--- Final Validation dataset contains 1039 elements, with 740 none, 92 crackles, 77 wheezes and 130 both ---
Model: "leaf_model9_model_bis"
______________________________________________________________________________________________________________
 Layer (type)                                    Output Shape                                Param #          
==============================================================================================================
 leaf (Leaf)                                     multiple                                    562              
                                                                                                              
 mel_filterbanks (MelFilterbanks)                multiple                                    0 (unused)       
                                                                                                              
 sincnet (SincNet)                               multiple                                    0 (unused)       
                                                                                                              
 sequential (Sequential)                         (None, 80, 500, 1)                          4                
                                                                                                              
 sequential_1 (Sequential)                       (None, 80, 500, 16)                         2352             
                                                                                                              
 sequential_2 (Sequential)                       (None, 80, 500, 16)                         6448             
                                                                                                              
 sequential_3 (Sequential)                       (None, 80, 500, 16)                         32               
                                                                                                              
 concatenate (Concatenate)                       multiple                                    0                
                                                                                                              
 sequential_4 (Sequential)                       (None, 2)                                   6192322          
                                                                                                              
==============================================================================================================
Total params: 6,201,880
Trainable params: 6,160,374
Non-trainable params: 41,506
______________________________________________________________________________________________________________
Target metric is avg_accuracy
Epoch 1/25
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
Validation cm: [[  0   0   0 740]
 [  0   0   0  92]
 [  0   0   0  77]
 [  0   0   0 130]]
Validation normalized_cm: [[0. 0. 0. 1.]
 [0. 0. 0. 1.]
 [0. 0. 0. 1.]
 [0. 0. 0. 1.]]
Validation acc: 0.12512030798845045
Validation class_accuracies: [0.0, 0.0, 0.0, 1.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 1
-- New best results were achieved. --
330/330 - 901s - loss: 0.5228 - accuracy: 0.6020 - 901s/epoch - 3s/step
Epoch 2/25
Validation cm: [[169 564   4   3]
 [  6  86   0   0]
 [ 12  52   6   7]
 [  3  90  17  20]]
Validation normalized_cm: [[0.228 0.762 0.005 0.004]
 [0.065 0.935 0.    0.   ]
 [0.156 0.675 0.078 0.091]
 [0.023 0.692 0.131 0.154]]
Validation acc: 0.27045235803657364
Validation class_accuracies: [0.22837837837837838, 0.9347826086956522, 0.07792207792207792, 0.15384615384615385]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.3487323047105656
Validation one_indexed_epoch: 2
-- New best results were achieved. --
330/330 - 877s - loss: 0.4366 - accuracy: 0.6309 - 877s/epoch - 3s/step
Epoch 3/25
Validation cm: [[360 371   6   3]
 [ 19  68   0   5]
 [ 27  44   1   5]
 [ 26  70  11  23]]
Validation normalized_cm: [[0.486 0.501 0.008 0.004]
 [0.207 0.739 0.    0.054]
 [0.351 0.571 0.013 0.065]
 [0.2   0.538 0.085 0.177]]
Validation acc: 0.43503368623676614
Validation class_accuracies: [0.4864864864864865, 0.7391304347826086, 0.012987012987012988, 0.17692307692307693]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.3538817527947963
Validation one_indexed_epoch: 3
-- New best results were achieved. --
330/330 - 877s - loss: 0.4024 - accuracy: 0.6009 - 877s/epoch - 3s/step
Epoch 4/25
Validation cm: [[711  25   4   0]
 [ 85   4   3   0]
 [ 69   1   7   0]
 [ 89   0  41   0]]
Validation normalized_cm: [[0.961 0.034 0.005 0.   ]
 [0.924 0.043 0.033 0.   ]
 [0.896 0.013 0.091 0.   ]
 [0.685 0.    0.315 0.   ]]
Validation acc: 0.6948989412897016
Validation class_accuracies: [0.9608108108108108, 0.043478260869565216, 0.09090909090909091, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.2737995406473667
Validation one_indexed_epoch: 4
The validation tracker metric at 0.3538817527947963 hasn't increased by 0 in 1 epochs
330/330 - 878s - loss: 0.3844 - accuracy: 0.6273 - 878s/epoch - 3s/step
Epoch 5/25
Validation cm: [[478 208  43  11]
 [ 32  43  10   7]
 [ 26   9  29  13]
 [ 32  20  68  10]]
Validation normalized_cm: [[0.646 0.281 0.058 0.015]
 [0.348 0.467 0.109 0.076]
 [0.338 0.117 0.377 0.169]
 [0.246 0.154 0.523 0.077]]
Validation acc: 0.5389797882579404
Validation class_accuracies: [0.6459459459459459, 0.4673913043478261, 0.37662337662337664, 0.07692307692307693]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.39172092596005637
Validation one_indexed_epoch: 5
-- New best results were achieved. --
330/330 - 880s - loss: 0.3647 - accuracy: 0.6164 - 880s/epoch - 3s/step
Epoch 6/25
Validation cm: [[720  11   8   1]
 [ 82   5   4   1]
 [ 62   0  14   1]
 [ 67   2  50  11]]
Validation normalized_cm: [[0.973 0.015 0.011 0.001]
 [0.891 0.054 0.043 0.011]
 [0.805 0.    0.182 0.013]
 [0.515 0.015 0.385 0.085]]
Validation acc: 0.7218479307025987
Validation class_accuracies: [0.972972972972973, 0.05434782608695652, 0.18181818181818182, 0.08461538461538462]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.323438591373374
Validation one_indexed_epoch: 6
The validation tracker metric at 0.39172092596005637 hasn't increased by 0 in 1 epochs
330/330 - 881s - loss: 0.3503 - accuracy: 0.6049 - 881s/epoch - 3s/step
Epoch 7/25
Validation cm: [[524 103  86  27]
 [ 36  32   5  19]
 [ 20   1  39  17]
 [ 30  17  32  51]]
Validation normalized_cm: [[0.708 0.139 0.116 0.036]
 [0.391 0.348 0.054 0.207]
 [0.26  0.013 0.506 0.221]
 [0.231 0.131 0.246 0.392]]
Validation acc: 0.6217516843118384
Validation class_accuracies: [0.7081081081081081, 0.34782608695652173, 0.5064935064935064, 0.3923076923076923]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.4886838484664572
Validation one_indexed_epoch: 7
-- New best results were achieved. --
330/330 - 876s - loss: 0.3414 - accuracy: 0.6069 - 876s/epoch - 3s/step
Epoch 8/25
Validation cm: [[423 290   8  19]
 [ 10  69   0  13]
 [ 26  25   6  20]
 [  7  76  10  37]]
Validation normalized_cm: [[0.572 0.392 0.011 0.026]
 [0.109 0.75  0.    0.141]
 [0.338 0.325 0.078 0.26 ]
 [0.054 0.585 0.077 0.285]]
Validation acc: 0.5149181905678537
Validation class_accuracies: [0.5716216216216217, 0.75, 0.07792207792207792, 0.2846153846153846]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.4210397710397711
Validation one_indexed_epoch: 8
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 1 epochs
330/330 - 880s - loss: 0.3283 - accuracy: 0.6392 - 880s/epoch - 3s/step
Epoch 9/25
Validation cm: [[613  44  43  40]
 [ 47  21   3  21]
 [ 45   5  16  11]
 [ 95   5   6  24]]
Validation normalized_cm: [[0.828 0.059 0.058 0.054]
 [0.511 0.228 0.033 0.228]
 [0.584 0.065 0.208 0.143]
 [0.731 0.038 0.046 0.185]]
Validation acc: 0.6487006737247353
Validation class_accuracies: [0.8283783783783784, 0.22826086956521738, 0.2077922077922078, 0.18461538461538463]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.36226171008779706
Validation one_indexed_epoch: 9
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 2 epochs
330/330 - 879s - loss: 0.3170 - accuracy: 0.6322 - 879s/epoch - 3s/step
Epoch 10/25
Validation cm: [[574  12 125  29]
 [ 44   2  25  21]
 [ 23   1  50   3]
 [ 36   0  90   4]]
Validation normalized_cm: [[0.776 0.016 0.169 0.039]
 [0.478 0.022 0.272 0.228]
 [0.299 0.013 0.649 0.039]
 [0.277 0.    0.692 0.031]]
Validation acc: 0.6063522617901829
Validation class_accuracies: [0.7756756756756756, 0.021739130434782608, 0.6493506493506493, 0.03076923076923077]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.36938367155758456
Validation one_indexed_epoch: 10
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 3 epochs
330/330 - 880s - loss: 0.3105 - accuracy: 0.6136 - 880s/epoch - 3s/step
Epoch 11/25
Validation cm: [[596 106  27  11]
 [ 30  38  11  13]
 [ 28   2  41   6]
 [ 34  13  77   6]]
Validation normalized_cm: [[0.805 0.143 0.036 0.015]
 [0.326 0.413 0.12  0.141]
 [0.364 0.026 0.532 0.078]
 [0.262 0.1   0.592 0.046]]
Validation acc: 0.6554379210779596
Validation class_accuracies: [0.8054054054054054, 0.41304347826086957, 0.5324675324675324, 0.046153846153846156]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.44926756557191344
Validation one_indexed_epoch: 11
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 4 epochs
330/330 - 878s - loss: 0.2951 - accuracy: 0.6371 - 878s/epoch - 3s/step
Epoch 12/25
Validation cm: [[638  68  26   8]
 [ 45  21  13  13]
 [ 39   1  31   6]
 [ 35   3  73  19]]
Validation normalized_cm: [[0.862 0.092 0.035 0.011]
 [0.489 0.228 0.141 0.141]
 [0.506 0.013 0.403 0.078]
 [0.269 0.023 0.562 0.146]]
Validation acc: 0.6823869104908566
Validation class_accuracies: [0.8621621621621621, 0.22826086956521738, 0.4025974025974026, 0.14615384615384616]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.40979357011965706
Validation one_indexed_epoch: 12
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 5 epochs
330/330 - 879s - loss: 0.2892 - accuracy: 0.6295 - 879s/epoch - 3s/step
Epoch 13/25
Validation cm: [[629  57  42  12]
 [ 54  24   4  10]
 [ 27   2  42   6]
 [ 71  13  22  24]]
Validation normalized_cm: [[0.85  0.077 0.057 0.016]
 [0.587 0.261 0.043 0.109]
 [0.351 0.026 0.545 0.078]
 [0.546 0.1   0.169 0.185]]
Validation acc: 0.6920115495668913
Validation class_accuracies: [0.85, 0.2608695652173913, 0.5454545454545454, 0.18461538461538463]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.4602348738218303
Validation one_indexed_epoch: 13
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 6 epochs
330/330 - 873s - loss: 0.2799 - accuracy: 0.6223 - 873s/epoch - 3s/step
Epoch 14/25
Validation cm: [[589 122  16  13]
 [ 29  42   5  16]
 [ 43   8  18   8]
 [ 31  29  31  39]]
Validation normalized_cm: [[0.796 0.165 0.022 0.018]
 [0.315 0.457 0.054 0.174]
 [0.558 0.104 0.234 0.104]
 [0.238 0.223 0.238 0.3  ]]
Validation acc: 0.6621751684311838
Validation class_accuracies: [0.7959459459459459, 0.45652173913043476, 0.23376623376623376, 0.3]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.44655847971065366
Validation one_indexed_epoch: 14
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 7 epochs
330/330 - 879s - loss: 0.2736 - accuracy: 0.6394 - 879s/epoch - 3s/step
Epoch 15/25
Validation cm: [[579  26 129   6]
 [ 65  11   9   7]
 [ 46   1  28   2]
 [ 80   9  31  10]]
Validation normalized_cm: [[0.782 0.035 0.174 0.008]
 [0.707 0.12  0.098 0.076]
 [0.597 0.013 0.364 0.026]
 [0.615 0.069 0.238 0.077]]
Validation acc: 0.6044273339749759
Validation class_accuracies: [0.7824324324324324, 0.11956521739130435, 0.36363636363636365, 0.07692307692307693]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.33563927259579435
Validation one_indexed_epoch: 15
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 8 epochs
330/330 - 876s - loss: 0.2613 - accuracy: 0.6307 - 876s/epoch - 3s/step
Epoch 16/25
Validation cm: [[674  54   6   6]
 [ 54  18   7  13]
 [ 48   2  22   5]
 [ 57  14  38  21]]
Validation normalized_cm: [[0.911 0.073 0.008 0.008]
 [0.587 0.196 0.076 0.141]
 [0.623 0.026 0.286 0.065]
 [0.438 0.108 0.292 0.162]]
Validation acc: 0.7074109720885466
Validation class_accuracies: [0.9108108108108108, 0.1956521739130435, 0.2857142857142857, 0.16153846153846155]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.38842893299415043
Validation one_indexed_epoch: 16
The validation tracker metric at 0.4886838484664572 hasn't increased by 0 in 9 epochs
330/330 - 877s - loss: 0.2533 - accuracy: 0.6542 - 877s/epoch - 3s/step
Epoch 17/25
Validation cm: [[606  19  91  24]
 [ 46  14  21  11]
 [ 18   0  59   0]
 [ 41   5  61  23]]
Validation normalized_cm: [[0.819 0.026 0.123 0.032]
 [0.5   0.152 0.228 0.12 ]
 [0.234 0.    0.766 0.   ]
 [0.315 0.038 0.469 0.177]]
Validation acc: 0.6756496631376323
Validation class_accuracies: [0.8189189189189189, 0.15217391304347827, 0.7662337662337663, 0.17692307692307693]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.4785624187798101
Validation one_indexed_epoch: 17
The number of epochs since last 1% equals the patience
330/330 - 878s - loss: 0.2433 - accuracy: 0.6403 - 878s/epoch - 3s/step
----------------------------------
The best metrics for this job are: 

Best avg_accuracy: 0.4886838484664572
Best cm: [[524 103  86  27]
 [ 36  32   5  19]
 [ 20   1  39  17]
 [ 30  17  32  51]]
Best normalized_cm: [[0.708 0.139 0.116 0.036]
 [0.391 0.348 0.054 0.207]
 [0.26  0.013 0.506 0.221]
 [0.231 0.131 0.246 0.392]]
Best acc: 0.6217516843118384
Best class_accuracies: [0.7081081081081081, 0.34782608695652173, 0.5064935064935064, 0.3923076923076923]
Best precision: None
Best recall: None
Best f1: None
Best roc_auc: None
Best one_indexed_epoch: 7
avg_accuracy
model
cm
normalized_cm
acc
class_accuracies
precision
recall
f1
roc_auc
one_indexed_epoch
Initial weights
[<tf.Variable 'leaf/tfbanks_preemp/kernel:0' shape=(2, 1, 1) dtype=float32, numpy=
array([[[-0.943]],

       [[ 1.035]]], dtype=float32)>, <tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[3.713e-02, 1.502e+02],
       [3.565e-02, 9.585e+01],
       [5.102e-02, 1.500e+02],
       [6.911e-02, 1.500e+02],
       [5.279e-02, 1.500e+02],
       [7.562e-02, 9.602e+01],
       [8.060e-02, 9.602e+01],
       [9.796e-02, 9.592e+01],
       [9.739e-02, 9.597e+01],
       [1.251e-01, 9.581e+01],
       [1.361e-01, 9.588e+01],
       [1.419e-01, 9.588e+01],
       [1.612e-01, 9.593e+01],
       [1.717e-01, 9.604e+01],
       [1.809e-01, 9.578e+01],
       [1.972e-01, 9.550e+01],
       [2.065e-01, 1.500e+02],
       [2.257e-01, 9.587e+01],
       [2.512e-01, 9.577e+01],
       [2.780e-01, 9.577e+01],
       [2.860e-01, 9.574e+01],
       [2.819e-01, 9.568e+01],
       [3.146e-01, 9.577e+01],
       [3.268e-01, 9.570e+01],
       [3.405e-01, 6.365e+01],
       [3.866e-01, 9.568e+01],
       [3.845e-01, 6.369e+01],
       [4.204e-01, 9.587e+01],
       [4.269e-01, 6.380e+01],
       [4.378e-01, 6.391e+01],
       [4.683e-01, 6.385e+01],
       [5.586e-01, 6.398e+01],
       [4.992e-01, 6.393e+01],
       [5.881e-01, 6.395e+01],
       [6.328e-01, 6.397e+01],
       [6.566e-01, 6.395e+01],
       [5.250e-01, 6.405e+01],
       [6.001e-01, 6.404e+01],
       [5.717e-01, 4.794e+01],
       [7.321e-01, 4.785e+01],
       [6.344e-01, 4.790e+01],
       [7.753e-01, 4.810e+01],
       [7.827e-01, 4.793e+01],
       [8.232e-01, 4.800e+01],
       [9.318e-01, 4.821e+01],
       [8.416e-01, 4.806e+01],
       [1.034e+00, 4.809e+01],
       [9.218e-01, 3.849e+01],
       [1.076e+00, 3.842e+01],
       [1.136e+00, 3.847e+01],
       [1.292e+00, 3.840e+01],
       [1.133e+00, 3.840e+01],
       [1.169e+00, 3.197e+01],
       [1.304e+00, 3.205e+01],
       [1.342e+00, 3.836e+01],
       [1.267e+00, 3.189e+01],
       [1.381e+00, 3.202e+01],
       [1.290e+00, 3.191e+01],
       [1.419e+00, 2.747e+01],
       [1.572e+00, 2.755e+01],
       [1.538e+00, 3.200e+01],
       [1.655e+00, 2.750e+01],
       [1.621e+00, 2.743e+01],
       [1.809e+00, 2.403e+01],
       [1.945e+00, 2.398e+01],
       [1.820e+00, 2.394e+01],
       [1.879e+00, 2.409e+01],
       [1.963e+00, 2.398e+01],
       [1.973e+00, 2.128e+01],
       [2.266e+00, 2.142e+01],
       [2.198e+00, 1.916e+01],
       [2.260e+00, 1.899e+01],
       [2.326e+00, 2.120e+01],
       [2.452e+00, 1.906e+01],
       [2.583e+00, 1.927e+01],
       [2.609e+00, 1.726e+01],
       [2.657e+00, 1.727e+01],
       [2.763e+00, 1.590e+01],
       [2.964e+00, 1.763e+01],
       [2.923e+00, 1.586e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.426],
         [0.426],
         [0.411],
         [0.411],
         [0.404],
         [0.404],
         [0.403],
         [0.41 ],
         [0.408],
         [0.398],
         [0.405],
         [0.424],
         [0.412],
         [0.402],
         [0.41 ],
         [0.429],
         [0.425],
         [0.418],
         [0.404],
         [0.413],
         [0.408],
         [0.405],
         [0.402],
         [0.413],
         [0.41 ],
         [0.407],
         [0.396],
         [0.403],
         [0.42 ],
         [0.414],
         [0.426],
         [0.404],
         [0.408],
         [0.418],
         [0.414],
         [0.419],
         [0.407],
         [0.411],
         [0.416],
         [0.417],
         [0.418],
         [0.415],
         [0.42 ],
         [0.416],
         [0.377],
         [0.4  ],
         [0.407],
         [0.405],
         [0.414],
         [0.403],
         [0.41 ],
         [0.413],
         [0.41 ],
         [0.41 ],
         [0.411],
         [0.409],
         [0.408],
         [0.409],
         [0.405],
         [0.401],
         [0.406],
         [0.39 ],
         [0.403],
         [0.398],
         [0.397],
         [0.396],
         [0.389],
         [0.389],
         [0.393],
         [0.385],
         [0.394],
         [0.399],
         [0.406],
         [0.4  ],
         [0.391],
         [0.411],
         [0.415],
         [0.41 ],
         [0.402],
         [0.419]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.98 , 0.996, 0.982, 0.985, 0.986, 0.993, 0.991, 0.983, 0.981,
       0.978, 0.977, 0.979, 0.977, 0.974, 0.973, 0.98 , 0.977, 0.982,
       0.975, 0.97 , 0.969, 0.97 , 0.967, 0.967, 0.972, 0.974, 0.974,
       0.966, 0.971, 0.971, 0.959, 0.957, 0.959, 0.954, 0.952, 0.965,
       0.961, 0.955, 0.956, 0.963, 0.955, 0.963, 0.957, 0.955, 0.961,
       0.961, 0.941, 0.94 , 0.954, 0.947, 0.957, 0.935, 0.933, 0.948,
       0.958, 0.936, 0.953, 0.933, 0.934, 0.958, 0.947, 0.936, 0.935,
       0.957, 0.938, 0.936, 0.96 , 0.937, 0.937, 0.962, 0.963, 0.935,
       0.934, 0.943, 0.956, 0.933, 0.933, 0.942, 0.95 , 0.927],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([1.961, 1.941, 1.963, 1.961, 1.963, 1.952, 1.957, 1.957, 1.96 ,
       1.965, 1.971, 1.969, 1.973, 1.978, 1.981, 1.976, 1.98 , 1.975,
       1.982, 1.988, 1.988, 1.989, 1.993, 1.994, 1.991, 1.986, 1.985,
       1.993, 1.991, 1.99 , 2.002, 2.003, 2.001, 2.005, 2.008, 1.996,
       2.   , 2.004, 2.003, 1.998, 2.005, 1.997, 2.003, 2.004, 1.999,
       1.999, 2.019, 2.02 , 2.006, 2.013, 2.003, 2.025, 2.027, 2.012,
       2.002, 2.024, 2.007, 2.027, 2.025, 2.002, 2.013, 2.024, 2.025,
       2.002, 2.022, 2.024, 2.   , 2.023, 2.023, 1.997, 1.997, 2.024,
       2.025, 2.016, 2.003, 2.027, 2.026, 2.018, 2.009, 2.033],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.977, 1.975, 1.989, 1.99 , 1.995, 1.988, 1.989, 1.994, 1.998,
       1.999, 2.001, 2.001, 1.995, 1.995, 1.994, 1.991, 1.996, 1.989,
       2.   , 2.   , 2.002, 2.006, 2.01 , 2.01 , 2.008, 2.   , 1.996,
       2.003, 2.008, 2.008, 2.015, 2.013, 2.011, 2.015, 2.016, 2.005,
       2.015, 2.016, 2.015, 2.012, 2.017, 2.008, 2.013, 2.011, 2.   ,
       2.005, 2.022, 2.023, 2.012, 2.015, 2.009, 2.028, 2.029, 2.016,
       2.006, 2.026, 2.011, 2.028, 2.026, 2.006, 2.017, 2.026, 2.028,
       2.006, 2.024, 2.025, 2.003, 2.024, 2.024, 2.002, 2.002, 2.026,
       2.027, 2.018, 2.006, 2.028, 2.027, 2.018, 2.012, 2.033],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.076, 0.087, 0.075, 0.075, 0.076, 0.082, 0.08 , 0.077, 0.075,
       0.075, 0.074, 0.075, 0.074, 0.072, 0.072, 0.076, 0.072, 0.078,
       0.075, 0.074, 0.073, 0.074, 0.072, 0.071, 0.074, 0.076, 0.077,
       0.071, 0.074, 0.075, 0.068, 0.067, 0.068, 0.071, 0.068, 0.07 ,
       0.068, 0.072, 0.07 , 0.072, 0.069, 0.07 , 0.064, 0.063, 0.068,
       0.066, 0.063, 0.059, 0.067, 0.059, 0.061, 0.055, 0.055, 0.057,
       0.06 , 0.054, 0.058, 0.053, 0.051, 0.06 , 0.053, 0.051, 0.052,
       0.06 , 0.05 , 0.049, 0.063, 0.049, 0.05 , 0.063, 0.064, 0.049,
       0.048, 0.054, 0.06 , 0.049, 0.048, 0.062, 0.058, 0.047],
      dtype=float32)>]
Post training weights
[<tf.Variable 'leaf/tfbanks_preemp/kernel:0' shape=(2, 1, 1) dtype=float32, numpy=
array([[[-0.943]],

       [[ 1.035]]], dtype=float32)>, <tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[3.713e-02, 1.502e+02],
       [3.565e-02, 9.585e+01],
       [5.102e-02, 1.500e+02],
       [6.911e-02, 1.500e+02],
       [5.279e-02, 1.500e+02],
       [7.562e-02, 9.602e+01],
       [8.060e-02, 9.602e+01],
       [9.796e-02, 9.592e+01],
       [9.739e-02, 9.597e+01],
       [1.251e-01, 9.581e+01],
       [1.361e-01, 9.588e+01],
       [1.419e-01, 9.588e+01],
       [1.612e-01, 9.593e+01],
       [1.717e-01, 9.604e+01],
       [1.809e-01, 9.578e+01],
       [1.972e-01, 9.550e+01],
       [2.065e-01, 1.500e+02],
       [2.257e-01, 9.587e+01],
       [2.512e-01, 9.577e+01],
       [2.780e-01, 9.577e+01],
       [2.860e-01, 9.574e+01],
       [2.819e-01, 9.568e+01],
       [3.146e-01, 9.577e+01],
       [3.268e-01, 9.570e+01],
       [3.405e-01, 6.365e+01],
       [3.866e-01, 9.568e+01],
       [3.845e-01, 6.369e+01],
       [4.204e-01, 9.587e+01],
       [4.269e-01, 6.380e+01],
       [4.378e-01, 6.391e+01],
       [4.683e-01, 6.385e+01],
       [5.586e-01, 6.398e+01],
       [4.992e-01, 6.393e+01],
       [5.881e-01, 6.395e+01],
       [6.328e-01, 6.397e+01],
       [6.566e-01, 6.395e+01],
       [5.250e-01, 6.405e+01],
       [6.001e-01, 6.404e+01],
       [5.717e-01, 4.794e+01],
       [7.321e-01, 4.785e+01],
       [6.344e-01, 4.790e+01],
       [7.753e-01, 4.810e+01],
       [7.827e-01, 4.793e+01],
       [8.232e-01, 4.800e+01],
       [9.318e-01, 4.821e+01],
       [8.416e-01, 4.806e+01],
       [1.034e+00, 4.809e+01],
       [9.218e-01, 3.849e+01],
       [1.076e+00, 3.842e+01],
       [1.136e+00, 3.847e+01],
       [1.292e+00, 3.840e+01],
       [1.133e+00, 3.840e+01],
       [1.169e+00, 3.197e+01],
       [1.304e+00, 3.205e+01],
       [1.342e+00, 3.836e+01],
       [1.267e+00, 3.189e+01],
       [1.381e+00, 3.202e+01],
       [1.290e+00, 3.191e+01],
       [1.419e+00, 2.747e+01],
       [1.572e+00, 2.755e+01],
       [1.538e+00, 3.200e+01],
       [1.655e+00, 2.750e+01],
       [1.621e+00, 2.743e+01],
       [1.809e+00, 2.403e+01],
       [1.945e+00, 2.398e+01],
       [1.820e+00, 2.394e+01],
       [1.879e+00, 2.409e+01],
       [1.963e+00, 2.398e+01],
       [1.973e+00, 2.128e+01],
       [2.266e+00, 2.142e+01],
       [2.198e+00, 1.916e+01],
       [2.260e+00, 1.899e+01],
       [2.326e+00, 2.120e+01],
       [2.452e+00, 1.906e+01],
       [2.583e+00, 1.927e+01],
       [2.609e+00, 1.726e+01],
       [2.657e+00, 1.727e+01],
       [2.763e+00, 1.590e+01],
       [2.964e+00, 1.763e+01],
       [2.923e+00, 1.586e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.426],
         [0.426],
         [0.411],
         [0.411],
         [0.404],
         [0.404],
         [0.403],
         [0.41 ],
         [0.408],
         [0.398],
         [0.405],
         [0.424],
         [0.412],
         [0.402],
         [0.41 ],
         [0.429],
         [0.425],
         [0.418],
         [0.404],
         [0.413],
         [0.408],
         [0.405],
         [0.402],
         [0.413],
         [0.41 ],
         [0.407],
         [0.396],
         [0.403],
         [0.42 ],
         [0.414],
         [0.426],
         [0.404],
         [0.408],
         [0.418],
         [0.414],
         [0.419],
         [0.407],
         [0.411],
         [0.416],
         [0.417],
         [0.418],
         [0.415],
         [0.42 ],
         [0.416],
         [0.377],
         [0.4  ],
         [0.407],
         [0.405],
         [0.414],
         [0.403],
         [0.41 ],
         [0.413],
         [0.41 ],
         [0.41 ],
         [0.411],
         [0.409],
         [0.408],
         [0.409],
         [0.405],
         [0.401],
         [0.406],
         [0.39 ],
         [0.403],
         [0.398],
         [0.397],
         [0.396],
         [0.389],
         [0.389],
         [0.393],
         [0.385],
         [0.394],
         [0.399],
         [0.406],
         [0.4  ],
         [0.391],
         [0.411],
         [0.415],
         [0.41 ],
         [0.402],
         [0.419]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.98 , 0.996, 0.982, 0.985, 0.986, 0.993, 0.991, 0.983, 0.981,
       0.978, 0.977, 0.979, 0.977, 0.974, 0.973, 0.98 , 0.977, 0.982,
       0.975, 0.97 , 0.969, 0.97 , 0.967, 0.967, 0.972, 0.974, 0.974,
       0.966, 0.971, 0.971, 0.959, 0.957, 0.959, 0.954, 0.952, 0.965,
       0.961, 0.955, 0.956, 0.963, 0.955, 0.963, 0.957, 0.955, 0.961,
       0.961, 0.941, 0.94 , 0.954, 0.947, 0.957, 0.935, 0.933, 0.948,
       0.958, 0.936, 0.953, 0.933, 0.934, 0.958, 0.947, 0.936, 0.935,
       0.957, 0.938, 0.936, 0.96 , 0.937, 0.937, 0.962, 0.963, 0.935,
       0.934, 0.943, 0.956, 0.933, 0.933, 0.942, 0.95 , 0.927],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([1.961, 1.941, 1.963, 1.961, 1.963, 1.952, 1.957, 1.957, 1.96 ,
       1.965, 1.971, 1.969, 1.973, 1.978, 1.981, 1.976, 1.98 , 1.975,
       1.982, 1.988, 1.988, 1.989, 1.993, 1.994, 1.991, 1.986, 1.985,
       1.993, 1.991, 1.99 , 2.002, 2.003, 2.001, 2.005, 2.008, 1.996,
       2.   , 2.004, 2.003, 1.998, 2.005, 1.997, 2.003, 2.004, 1.999,
       1.999, 2.019, 2.02 , 2.006, 2.013, 2.003, 2.025, 2.027, 2.012,
       2.002, 2.024, 2.007, 2.027, 2.025, 2.002, 2.013, 2.024, 2.025,
       2.002, 2.022, 2.024, 2.   , 2.023, 2.023, 1.997, 1.997, 2.024,
       2.025, 2.016, 2.003, 2.027, 2.026, 2.018, 2.009, 2.033],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.977, 1.975, 1.989, 1.99 , 1.995, 1.988, 1.989, 1.994, 1.998,
       1.999, 2.001, 2.001, 1.995, 1.995, 1.994, 1.991, 1.996, 1.989,
       2.   , 2.   , 2.002, 2.006, 2.01 , 2.01 , 2.008, 2.   , 1.996,
       2.003, 2.008, 2.008, 2.015, 2.013, 2.011, 2.015, 2.016, 2.005,
       2.015, 2.016, 2.015, 2.012, 2.017, 2.008, 2.013, 2.011, 2.   ,
       2.005, 2.022, 2.023, 2.012, 2.015, 2.009, 2.028, 2.029, 2.016,
       2.006, 2.026, 2.011, 2.028, 2.026, 2.006, 2.017, 2.026, 2.028,
       2.006, 2.024, 2.025, 2.003, 2.024, 2.024, 2.002, 2.002, 2.026,
       2.027, 2.018, 2.006, 2.028, 2.027, 2.018, 2.012, 2.033],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.076, 0.087, 0.075, 0.075, 0.076, 0.082, 0.08 , 0.077, 0.075,
       0.075, 0.074, 0.075, 0.074, 0.072, 0.072, 0.076, 0.072, 0.078,
       0.075, 0.074, 0.073, 0.074, 0.072, 0.071, 0.074, 0.076, 0.077,
       0.071, 0.074, 0.075, 0.068, 0.067, 0.068, 0.071, 0.068, 0.07 ,
       0.068, 0.072, 0.07 , 0.072, 0.069, 0.07 , 0.064, 0.063, 0.068,
       0.066, 0.063, 0.059, 0.067, 0.059, 0.061, 0.055, 0.055, 0.057,
       0.06 , 0.054, 0.058, 0.053, 0.051, 0.06 , 0.053, 0.051, 0.052,
       0.06 , 0.05 , 0.049, 0.063, 0.049, 0.05 , 0.063, 0.064, 0.049,
       0.048, 0.054, 0.06 , 0.049, 0.048, 0.062, 0.058, 0.047],
      dtype=float32)>]/home/alirachidi/classification_algorithm/trainers/modules/main/global_helpers.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
  plt.show()
/home/alirachidi/classification_algorithm/trainers/modules/callbacks/visualizationCallback.py:32: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  print(np.array(self.model._frontend.weights) - np.array(self.first_weights))

Weight difference
[<tf.Tensor: shape=(2, 1, 1), dtype=float32, numpy=
 array([[[0.]],

        [[0.]]], dtype=float32)>
 <tf.Tensor: shape=(80, 2), dtype=float32, numpy=
 array([[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]], dtype=float32)>
 <tf.Tensor: shape=(1, 1, 80, 1), dtype=float32, numpy=
 array([[[[0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.]]]], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>   ]
