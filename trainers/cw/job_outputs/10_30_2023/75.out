Tensorflow Version: 2.8.0
Num GPUs Available:  1
Collecting Variables...
All variables have been collected.
../cache/
cw
train75
Description: crackles/w with diff params + w/o mixing data + diff loss
-----------------------
Job id is 1.
- Loading Perch.
3278 Perch audios have been loaded.
- Loading Icbhi.
725 Icbhi audios have been loaded.
- Loading Antwerp.
131 Antwerp audios have been loaded.
- Preparing Perch.
862 Perch groups of audio chunks (by filename or patients) have been prepared.
- Preparing Icbhi.
112 Icbhi groups of audio chunks (by filename or patients) have been prepared.
- Preparing Antwerp.
15 Antwerp groups of audio chunks (by filename or patients) have been prepared.
--- Samples are being split into training/val groups and de-grouped by patient ---
--- Perch training dataset went from 0 to 2649 elements, with 2346 none's, 61 crakles, 186 wheezes and 56 both ---
--- Perch Validation dataset contains 629 elements, with 551 none, 12 crackles, 54 wheezes and 12 both ---
--- Icbhi training dataset went from 0 to 2040 elements, with 707 none's, 720 crakles, 285 wheezes and 327 both ---
--- Icbhi Validation dataset contains 299 elements, with 172 none, 70 crackles, 18 wheezes and 39 both ---
--- Antwerp training dataset went from 0 to 580 elements, with 82 none's, 16 crakles, 448 wheezes and 34 both ---
--- Antwerp Validation dataset contains 111 elements, with 17 none, 10 crackles, 5 wheezes and 79 both ---
3908
1138
964
298
-----------------------
--- Final training dataset went from 0 to 5046 elements, with 3908 0's, 1138 1's and 0 others ---
--- Final Validation dataset contains 1262 elements, with 964 0's and 298 1's ---
Model: "leaf_model9_model3"
______________________________________________________________________________________________________________
 Layer (type)                                    Output Shape                                Param #          
==============================================================================================================
 leaf (Leaf)                                     multiple                                    560              
                                                                                                              
 mel_filterbanks (MelFilterbanks)                multiple                                    0 (unused)       
                                                                                                              
 sincnet (SincNet)                               multiple                                    0 (unused)       
                                                                                                              
 sequential (Sequential)                         (None, 80, 500, 1)                          4                
                                                                                                              
 sequential_1 (Sequential)                       (None, 80, 500, 16)                         2352             
                                                                                                              
 sequential_2 (Sequential)                       (None, 80, 500, 16)                         6448             
                                                                                                              
 sequential_3 (Sequential)                       (None, 80, 500, 16)                         32               
                                                                                                              
 concatenate (Concatenate)                       multiple                                    0                
                                                                                                              
 sequential_4 (Sequential)                       (None, 1)                                   6191809          
                                                                                                              
==============================================================================================================
Total params: 6,201,365
Trainable params: 6,159,859
Non-trainable params: 41,506
______________________________________________________________________________________________________________
Target metric is avg_accuracy
Epoch 1/25
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
WARNING:tensorflow:Gradients do not exist for variables ['kernel:0'] when minimizing the loss. If you're using `model.compile()`, did you forget to provide a `loss`argument?
Validation cm: [[964   0]
 [298   0]]
Validation normalized_cm: [[1. 0.]
 [1. 0.]]
Validation acc: 0.7638668779714739
Validation class_accuracies: [1.0, 0.0]
Validation precision: 0.0
Validation recall: 0.0
Validation f1: 0.0
Validation roc_auc: 0.28698585312874214
Validation avg_accuracy: 0.5
Validation one_indexed_epoch: 1
-- New best results were achieved. --
Patient Confusion matrix: 
 [[693   0]
 [ 47   0]] 
Patient Normalized Confusion matrix: 
 [[1. 0.]
 [1. 0.]] 
Patient Validation accuracy: 
 93.65 
Patient Validation class accuracies: 
 [1.0, 0.0] 
316/316 - 564s - loss: 0.5234 - accuracy: 0.7582 - 564s/epoch - 2s/step
Epoch 2/25
Validation cm: [[964   0]
 [298   0]]
Validation normalized_cm: [[1. 0.]
 [1. 0.]]
Validation acc: 0.7638668779714739
Validation class_accuracies: [1.0, 0.0]
Validation precision: 0.0
Validation recall: 0.0
Validation f1: 0.0
Validation roc_auc: 0.8142039600100254
Validation avg_accuracy: 0.5
Validation one_indexed_epoch: 2
The validation tracker metric at 0.5 hasn't increased by 0 in 1 epochs
316/316 - 548s - loss: 0.4285 - accuracy: 0.7885 - 548s/epoch - 2s/step
Epoch 3/25
Validation cm: [[964   0]
 [298   0]]
Validation normalized_cm: [[1. 0.]
 [1. 0.]]
Validation acc: 0.7638668779714739
Validation class_accuracies: [1.0, 0.0]
Validation precision: 0.0
Validation recall: 0.0
Validation f1: 0.0
Validation roc_auc: 0.5494618340805927
Validation avg_accuracy: 0.5
Validation one_indexed_epoch: 3
The validation tracker metric at 0.5 hasn't increased by 0 in 2 epochs
316/316 - 545s - loss: 0.4382 - accuracy: 0.7810 - 545s/epoch - 2s/step
Epoch 4/25
Validation cm: [[749 215]
 [128 170]]
Validation normalized_cm: [[0.777 0.223]
 [0.43  0.57 ]]
Validation acc: 0.7282091917591125
Validation class_accuracies: [0.7769709543568465, 0.5704697986577181]
Validation precision: 0.44155844155844154
Validation recall: 0.5704697986577181
Validation f1: 0.49780380673499264
Validation roc_auc: 0.7335626166142193
Validation avg_accuracy: 0.6737203765072823
Validation one_indexed_epoch: 4
-- New best results were achieved. --
Patient Confusion matrix: 
 [[590 103]
 [ 22  25]] 
Patient Normalized Confusion matrix: 
 [[0.851 0.149]
 [0.468 0.532]] 
Patient Validation accuracy: 
 83.11 
Patient Validation class accuracies: 
 [0.8513708513708513, 0.5319148936170213] 
316/316 - 544s - loss: 0.4299 - accuracy: 0.7897 - 544s/epoch - 2s/step
Epoch 5/25
Validation cm: [[957   7]
 [264  34]]
Validation normalized_cm: [[0.993 0.007]
 [0.886 0.114]]
Validation acc: 0.7852614896988906
Validation class_accuracies: [0.9927385892116183, 0.11409395973154363]
Validation precision: 0.8292682926829268
Validation recall: 0.11409395973154363
Validation f1: 0.20058997050147492
Validation roc_auc: 0.8187989083516668
Validation avg_accuracy: 0.5534162744715809
Validation one_indexed_epoch: 5
The validation tracker metric at 0.6737203765072823 hasn't increased by 0 in 1 epochs
316/316 - 544s - loss: 0.4085 - accuracy: 0.7887 - 544s/epoch - 2s/step
Epoch 6/25
Validation cm: [[950  14]
 [260  38]]
Validation normalized_cm: [[0.985 0.015]
 [0.872 0.128]]
Validation acc: 0.7828843106180665
Validation class_accuracies: [0.9854771784232366, 0.12751677852348994]
Validation precision: 0.7307692307692307
Validation recall: 0.12751677852348994
Validation f1: 0.21714285714285717
Validation roc_auc: 0.5757539892506056
Validation avg_accuracy: 0.5564969784733632
Validation one_indexed_epoch: 6
The validation tracker metric at 0.6737203765072823 hasn't increased by 0 in 2 epochs
316/316 - 507s - loss: 0.3990 - accuracy: 0.8008 - 507s/epoch - 2s/step
Epoch 7/25
Validation cm: [[680 284]
 [ 34 264]]
Validation normalized_cm: [[0.705 0.295]
 [0.114 0.886]]
Validation acc: 0.7480190174326465
Validation class_accuracies: [0.7053941908713693, 0.8859060402684564]
Validation precision: 0.48175182481751827
Validation recall: 0.8859060402684564
Validation f1: 0.624113475177305
Validation roc_auc: 0.8551790637444652
Validation avg_accuracy: 0.7956501155699129
Validation one_indexed_epoch: 7
-- New best results were achieved. --
Patient Confusion matrix: 
 [[613  80]
 [ 20  27]] 
Patient Normalized Confusion matrix: 
 [[0.885 0.115]
 [0.426 0.574]] 
Patient Validation accuracy: 
 86.49 
Patient Validation class accuracies: 
 [0.8845598845598845, 0.574468085106383] 
316/316 - 529s - loss: 0.3910 - accuracy: 0.8012 - 529s/epoch - 2s/step
Epoch 8/25
Validation cm: [[809 155]
 [131 167]]
Validation normalized_cm: [[0.839 0.161]
 [0.44  0.56 ]]
Validation acc: 0.7733755942947702
Validation class_accuracies: [0.8392116182572614, 0.5604026845637584]
Validation precision: 0.5186335403726708
Validation recall: 0.5604026845637584
Validation f1: 0.5387096774193548
Validation roc_auc: 0.8063646996574674
Validation avg_accuracy: 0.69980715141051
Validation one_indexed_epoch: 8
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 1 epochs
316/316 - 523s - loss: 0.3790 - accuracy: 0.8101 - 523s/epoch - 2s/step
Epoch 9/25
Validation cm: [[956   8]
 [272  26]]
Validation normalized_cm: [[0.992 0.008]
 [0.913 0.087]]
Validation acc: 0.7781299524564184
Validation class_accuracies: [0.991701244813278, 0.087248322147651]
Validation precision: 0.7647058823529411
Validation recall: 0.087248322147651
Validation f1: 0.1566265060240964
Validation roc_auc: 0.7636212370157899
Validation avg_accuracy: 0.5394747834804645
Validation one_indexed_epoch: 9
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 2 epochs
316/316 - 534s - loss: 0.3740 - accuracy: 0.8133 - 534s/epoch - 2s/step
Epoch 10/25
Validation cm: [[843 121]
 [134 164]]
Validation normalized_cm: [[0.874 0.126]
 [0.45  0.55 ]]
Validation acc: 0.7979397781299524
Validation class_accuracies: [0.8744813278008299, 0.5503355704697986]
Validation precision: 0.5754385964912281
Validation recall: 0.5503355704697986
Validation f1: 0.5626072041166381
Validation roc_auc: 0.795577014119023
Validation avg_accuracy: 0.7124084491353142
Validation one_indexed_epoch: 10
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 3 epochs
316/316 - 541s - loss: 0.3609 - accuracy: 0.8278 - 541s/epoch - 2s/step
Epoch 11/25
Validation cm: [[961   3]
 [285  13]]
Validation normalized_cm: [[0.997 0.003]
 [0.956 0.044]]
Validation acc: 0.7717908082408875
Validation class_accuracies: [0.9968879668049793, 0.0436241610738255]
Validation precision: 0.8125
Validation recall: 0.0436241610738255
Validation f1: 0.08280254777070065
Validation roc_auc: 0.7139122504107605
Validation avg_accuracy: 0.5202560639394024
Validation one_indexed_epoch: 11
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 4 epochs
316/316 - 539s - loss: 0.3570 - accuracy: 0.8278 - 539s/epoch - 2s/step
Epoch 12/25
Validation cm: [[959   5]
 [279  19]]
Validation normalized_cm: [[0.995 0.005]
 [0.936 0.064]]
Validation acc: 0.7749603803486529
Validation class_accuracies: [0.9948132780082988, 0.06375838926174497]
Validation precision: 0.7916666666666666
Validation recall: 0.06375838926174497
Validation f1: 0.11801242236024845
Validation roc_auc: 0.6605447102397728
Validation avg_accuracy: 0.5292858336350219
Validation one_indexed_epoch: 12
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 5 epochs
316/316 - 543s - loss: 0.3431 - accuracy: 0.8387 - 543s/epoch - 2s/step
Epoch 13/25
Validation cm: [[667 297]
 [ 30 268]]
Validation normalized_cm: [[0.692 0.308]
 [0.101 0.899]]
Validation acc: 0.7408874801901744
Validation class_accuracies: [0.691908713692946, 0.8993288590604027]
Validation precision: 0.4743362831858407
Validation recall: 0.8993288590604027
Validation f1: 0.6210892236384705
Validation roc_auc: 0.8666281433623882
Validation avg_accuracy: 0.7956187863766744
Validation one_indexed_epoch: 13
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 6 epochs
316/316 - 536s - loss: 0.3319 - accuracy: 0.8462 - 536s/epoch - 2s/step
Epoch 14/25
Validation cm: [[798 166]
 [ 89 209]]
Validation normalized_cm: [[0.828 0.172]
 [0.299 0.701]]
Validation acc: 0.7979397781299524
Validation class_accuracies: [0.8278008298755186, 0.7013422818791947]
Validation precision: 0.5573333333333333
Validation recall: 0.7013422818791947
Validation f1: 0.6210995542347697
Validation roc_auc: 0.842810994458214
Validation avg_accuracy: 0.7645715558773567
Validation one_indexed_epoch: 14
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 7 epochs
316/316 - 535s - loss: 0.3335 - accuracy: 0.8415 - 535s/epoch - 2s/step
Epoch 15/25
Validation cm: [[957   7]
 [266  32]]
Validation normalized_cm: [[0.993 0.007]
 [0.893 0.107]]
Validation acc: 0.783676703645008
Validation class_accuracies: [0.9927385892116183, 0.10738255033557047]
Validation precision: 0.8205128205128205
Validation recall: 0.10738255033557047
Validation f1: 0.18991097922848665
Validation roc_auc: 0.8557986855662925
Validation avg_accuracy: 0.5500605697735944
Validation one_indexed_epoch: 15
The validation tracker metric at 0.7956501155699129 hasn't increased by 0 in 8 epochs
316/316 - 562s - loss: 0.3232 - accuracy: 0.8551 - 562s/epoch - 2s/step
Epoch 16/25
Validation cm: [[759 205]
 [ 54 244]]
Validation normalized_cm: [[0.787 0.213]
 [0.181 0.819]]
Validation acc: 0.794770206022187
Validation class_accuracies: [0.7873443983402489, 0.8187919463087249]
Validation precision: 0.5434298440979956
Validation recall: 0.8187919463087249
Validation f1: 0.6532797858099063
Validation roc_auc: 0.8706139129466149
Validation avg_accuracy: 0.8030681723244869
Validation one_indexed_epoch: 16
-- New best results were achieved. --
Patient Confusion matrix: 
 [[602  91]
 [ 16  31]] 
Patient Normalized Confusion matrix: 
 [[0.869 0.131]
 [0.34  0.66 ]] 
Patient Validation accuracy: 
 85.54 
Patient Validation class accuracies: 
 [0.8686868686868687, 0.6595744680851063] 
316/316 - 536s - loss: 0.3070 - accuracy: 0.8565 - 536s/epoch - 2s/step
Epoch 17/25
Validation cm: [[847 117]
 [ 94 204]]
Validation normalized_cm: [[0.879 0.121]
 [0.315 0.685]]
Validation acc: 0.8328050713153724
Validation class_accuracies: [0.8786307053941909, 0.6845637583892618]
Validation precision: 0.6355140186915887
Validation recall: 0.6845637583892618
Validation f1: 0.6591276252019386
Validation roc_auc: 0.8820490684786545
Validation avg_accuracy: 0.7815972318917264
Validation one_indexed_epoch: 17
The validation tracker metric at 0.8030681723244869 hasn't increased by 0 in 1 epochs
316/316 - 522s - loss: 0.2974 - accuracy: 0.8660 - 522s/epoch - 2s/step
Epoch 18/25
Validation cm: [[912  52]
 [214  84]]
Validation normalized_cm: [[0.946 0.054]
 [0.718 0.282]]
Validation acc: 0.7892234548335975
Validation class_accuracies: [0.946058091286307, 0.28187919463087246]
Validation precision: 0.6176470588235294
Validation recall: 0.28187919463087246
Validation f1: 0.3870967741935484
Validation roc_auc: 0.7142359854075581
Validation avg_accuracy: 0.6139686429585898
Validation one_indexed_epoch: 18
The validation tracker metric at 0.8030681723244869 hasn't increased by 0 in 2 epochs
316/316 - 608s - loss: 0.2965 - accuracy: 0.8648 - 608s/epoch - 2s/step
Epoch 19/25
Validation cm: [[881  83]
 [135 163]]
Validation normalized_cm: [[0.914 0.086]
 [0.453 0.547]]
Validation acc: 0.8272583201267829
Validation class_accuracies: [0.9139004149377593, 0.5469798657718121]
Validation precision: 0.6626016260162602
Validation recall: 0.5469798657718121
Validation f1: 0.599264705882353
Validation roc_auc: 0.8232894260491799
Validation avg_accuracy: 0.7304401403547858
Validation one_indexed_epoch: 19
The validation tracker metric at 0.8030681723244869 hasn't increased by 0 in 3 epochs
316/316 - 578s - loss: 0.2801 - accuracy: 0.8732 - 578s/epoch - 2s/step
Epoch 20/25
Validation cm: [[838 126]
 [ 94 204]]
Validation normalized_cm: [[0.869 0.131]
 [0.315 0.685]]
Validation acc: 0.8256735340729001
Validation class_accuracies: [0.8692946058091287, 0.6845637583892618]
Validation precision: 0.6181818181818182
Validation recall: 0.6845637583892618
Validation f1: 0.6496815286624203
Validation roc_auc: 0.8670493469603721
Validation avg_accuracy: 0.7769291820991953
Validation one_indexed_epoch: 20
The validation tracker metric at 0.8030681723244869 hasn't increased by 0 in 4 epochs
316/316 - 544s - loss: 0.2850 - accuracy: 0.8722 - 544s/epoch - 2s/step
Epoch 21/25
Validation cm: [[769 195]
 [ 68 230]]
Validation normalized_cm: [[0.798 0.202]
 [0.228 0.772]]
Validation acc: 0.7916006339144216
Validation class_accuracies: [0.7977178423236515, 0.7718120805369127]
Validation precision: 0.5411764705882353
Validation recall: 0.7718120805369127
Validation f1: 0.636237897648686
Validation roc_auc: 0.838240413266869
Validation avg_accuracy: 0.7847649614302821
Validation one_indexed_epoch: 21
The validation tracker metric at 0.8030681723244869 hasn't increased by 0 in 5 epochs
316/316 - 550s - loss: 0.2671 - accuracy: 0.8843 - 550s/epoch - 2s/step
Epoch 22/25
Validation cm: [[820 144]
 [ 65 233]]
Validation normalized_cm: [[0.851 0.149]
 [0.218 0.782]]
Validation acc: 0.8343898573692552
Validation class_accuracies: [0.8506224066390041, 0.7818791946308725]
Validation precision: 0.6180371352785146
Validation recall: 0.7818791946308725
Validation f1: 0.6903703703703704
Validation roc_auc: 0.8881512991172129
Validation avg_accuracy: 0.8162508006349383
Validation one_indexed_epoch: 22
-- New best results were achieved. --
Patient Confusion matrix: 
 [[637  56]
 [ 15  32]] 
Patient Normalized Confusion matrix: 
 [[0.919 0.081]
 [0.319 0.681]] 
Patient Validation accuracy: 
 90.41 
Patient Validation class accuracies: 
 [0.9191919191919192, 0.6808510638297872] 
316/316 - 551s - loss: 0.2573 - accuracy: 0.8886 - 551s/epoch - 2s/step
Epoch 23/25
Validation cm: [[920  44]
 [173 125]]
Validation normalized_cm: [[0.954 0.046]
 [0.581 0.419]]
Validation acc: 0.8280507131537242
Validation class_accuracies: [0.9543568464730291, 0.41946308724832215]
Validation precision: 0.7396449704142012
Validation recall: 0.41946308724832215
Validation f1: 0.5353319057815845
Validation roc_auc: 0.8684173883984516
Validation avg_accuracy: 0.6869099668606756
Validation one_indexed_epoch: 23
The validation tracker metric at 0.8162508006349383 hasn't increased by 0 in 1 epochs
316/316 - 562s - loss: 0.2590 - accuracy: 0.8878 - 562s/epoch - 2s/step
Epoch 24/25
Validation cm: [[840 124]
 [ 94 204]]
Validation normalized_cm: [[0.871 0.129]
 [0.315 0.685]]
Validation acc: 0.8272583201267829
Validation class_accuracies: [0.8713692946058091, 0.6845637583892618]
Validation precision: 0.6219512195121951
Validation recall: 0.6845637583892618
Validation f1: 0.6517571884984026
Validation roc_auc: 0.8621062964716366
Validation avg_accuracy: 0.7779665264975355
Validation one_indexed_epoch: 24
The validation tracker metric at 0.8162508006349383 hasn't increased by 0 in 2 epochs
316/316 - 563s - loss: 0.2414 - accuracy: 0.8973 - 563s/epoch - 2s/step
Epoch 25/25
Validation cm: [[617 347]
 [ 33 265]]
Validation normalized_cm: [[0.64  0.36 ]
 [0.111 0.889]]
Validation acc: 0.6988906497622821
Validation class_accuracies: [0.6400414937759336, 0.889261744966443]
Validation precision: 0.43300653594771243
Validation recall: 0.889261744966443
Validation f1: 0.5824175824175825
Validation roc_auc: 0.8791633016792448
Validation avg_accuracy: 0.7646516193711883
Validation one_indexed_epoch: 25
The validation tracker metric at 0.8162508006349383 hasn't increased by 0 in 3 epochs
316/316 - 555s - loss: 0.2264 - accuracy: 0.9078 - 555s/epoch - 2s/step
----------------------------------
The best metrics for this job are: 

Best avg_accuracy: 0.8162508006349383
Best cm: [[820 144]
 [ 65 233]]
Best normalized_cm: [[0.851 0.149]
 [0.218 0.782]]
Best acc: 0.8343898573692552
Best class_accuracies: [0.8506224066390041, 0.7818791946308725]
Best precision: 0.6180371352785146
Best recall: 0.7818791946308725
Best f1: 0.6903703703703704
Best roc_auc: 0.8881512991172129
Best one_indexed_epoch: 22
Best patient_cm: [[637  56]
 [ 15  32]]
avg_accuracy
model
cm
normalized_cm
acc
class_accuracies
precision
recall
f1
roc_auc
one_indexed_epoch
patient_cm
Initial weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[0.000e+00, 1.501e+02],
       [4.101e-02, 9.604e+01],
       [4.075e-02, 1.501e+02],
       [1.204e-01, 1.503e+02],
       [0.000e+00, 1.500e+02],
       [8.671e-02, 9.608e+01],
       [0.000e+00, 9.594e+01],
       [9.201e-02, 9.572e+01],
       [7.607e-02, 9.551e+01],
       [1.455e-01, 9.556e+01],
       [1.177e-01, 9.556e+01],
       [1.290e-01, 9.544e+01],
       [1.492e-01, 9.536e+01],
       [2.044e-01, 9.565e+01],
       [1.832e-01, 9.561e+01],
       [1.948e-01, 9.565e+01],
       [2.146e-01, 1.501e+02],
       [2.570e-01, 9.562e+01],
       [2.356e-01, 9.611e+01],
       [2.706e-01, 9.584e+01],
       [2.970e-01, 9.580e+01],
       [2.401e-01, 9.604e+01],
       [2.837e-01, 9.600e+01],
       [3.082e-01, 9.631e+01],
       [3.678e-01, 6.398e+01],
       [3.444e-01, 9.632e+01],
       [4.148e-01, 6.387e+01],
       [4.256e-01, 9.629e+01],
       [4.128e-01, 6.399e+01],
       [5.872e-01, 6.408e+01],
       [4.730e-01, 6.423e+01],
       [4.987e-01, 6.422e+01],
       [5.055e-01, 6.415e+01],
       [5.456e-01, 6.388e+01],
       [5.607e-01, 6.389e+01],
       [5.819e-01, 6.387e+01],
       [6.347e-01, 6.391e+01],
       [6.671e-01, 6.392e+01],
       [6.819e-01, 4.764e+01],
       [7.546e-01, 4.759e+01],
       [7.686e-01, 4.765e+01],
       [8.247e-01, 4.796e+01],
       [8.216e-01, 4.793e+01],
       [9.044e-01, 4.802e+01],
       [8.551e-01, 4.783e+01],
       [8.886e-01, 4.799e+01],
       [1.021e+00, 4.809e+01],
       [9.850e-01, 3.828e+01],
       [9.464e-01, 3.843e+01],
       [1.057e+00, 3.828e+01],
       [1.217e+00, 3.847e+01],
       [1.187e+00, 3.846e+01],
       [1.180e+00, 3.191e+01],
       [1.195e+00, 3.210e+01],
       [1.191e+00, 3.838e+01],
       [1.280e+00, 3.205e+01],
       [1.442e+00, 3.196e+01],
       [1.422e+00, 3.196e+01],
       [1.436e+00, 2.737e+01],
       [1.434e+00, 2.743e+01],
       [1.613e+00, 3.202e+01],
       [1.679e+00, 2.751e+01],
       [1.708e+00, 2.751e+01],
       [1.728e+00, 2.394e+01],
       [1.887e+00, 2.400e+01],
       [1.899e+00, 2.399e+01],
       [1.952e+00, 2.396e+01],
       [1.988e+00, 2.413e+01],
       [2.026e+00, 2.144e+01],
       [2.176e+00, 2.138e+01],
       [2.231e+00, 1.921e+01],
       [2.201e+00, 1.914e+01],
       [2.405e+00, 2.126e+01],
       [2.362e+00, 1.915e+01],
       [2.484e+00, 1.920e+01],
       [2.606e+00, 1.747e+01],
       [2.767e+00, 1.748e+01],
       [2.883e+00, 1.614e+01],
       [2.894e+00, 1.759e+01],
       [2.983e+00, 1.594e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.369],
         [0.402],
         [0.382],
         [0.392],
         [0.377],
         [0.409],
         [0.374],
         [0.377],
         [0.35 ],
         [0.39 ],
         [0.373],
         [0.395],
         [0.388],
         [0.394],
         [0.391],
         [0.382],
         [0.395],
         [0.396],
         [0.412],
         [0.41 ],
         [0.406],
         [0.42 ],
         [0.403],
         [0.418],
         [0.376],
         [0.411],
         [0.395],
         [0.412],
         [0.396],
         [0.403],
         [0.378],
         [0.378],
         [0.396],
         [0.427],
         [0.429],
         [0.427],
         [0.423],
         [0.419],
         [0.449],
         [0.439],
         [0.423],
         [0.404],
         [0.424],
         [0.386],
         [0.429],
         [0.389],
         [0.391],
         [0.424],
         [0.399],
         [0.416],
         [0.402],
         [0.4  ],
         [0.409],
         [0.4  ],
         [0.408],
         [0.409],
         [0.41 ],
         [0.412],
         [0.411],
         [0.41 ],
         [0.402],
         [0.399],
         [0.392],
         [0.399],
         [0.405],
         [0.401],
         [0.395],
         [0.393],
         [0.392],
         [0.389],
         [0.395],
         [0.399],
         [0.397],
         [0.398],
         [0.394],
         [0.394],
         [0.394],
         [0.394],
         [0.395],
         [0.413]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.967, 0.957, 0.97 , 0.964, 0.955, 0.96 , 0.967, 0.967, 0.962,
       0.967, 0.958, 0.956, 0.961, 0.953, 0.95 , 0.953, 0.965, 0.962,
       0.957, 0.97 , 0.973, 0.956, 0.962, 0.948, 0.962, 0.955, 0.956,
       0.949, 0.965, 0.947, 0.97 , 0.968, 0.961, 0.962, 0.963, 0.959,
       0.956, 0.958, 0.964, 0.961, 0.96 , 0.949, 0.946, 0.96 , 0.945,
       0.97 , 0.965, 0.954, 0.966, 0.95 , 0.967, 0.967, 0.95 , 0.967,
       0.962, 0.959, 0.951, 0.959, 0.958, 0.951, 0.957, 0.966, 0.956,
       0.958, 0.965, 0.964, 0.957, 0.957, 0.963, 0.958, 0.955, 0.954,
       0.956, 0.967, 0.957, 0.967, 0.957, 0.958, 0.963, 0.957],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([1.998, 2.01 , 2.015, 1.998, 2.019, 1.992, 2.005, 1.981, 1.981,
       1.994, 1.988, 2.002, 1.994, 2.004, 2.005, 2.003, 1.995, 1.996,
       2.003, 1.989, 1.986, 2.003, 1.996, 2.012, 1.997, 2.004, 2.004,
       2.011, 1.995, 2.013, 1.989, 1.991, 1.998, 1.998, 1.996, 2.   ,
       2.003, 2.001, 1.995, 1.998, 1.999, 2.01 , 2.013, 2.   , 2.015,
       1.99 , 1.995, 2.007, 1.994, 2.011, 1.993, 1.993, 2.01 , 1.993,
       1.998, 2.001, 2.009, 2.001, 2.002, 2.009, 2.003, 1.993, 2.004,
       2.002, 1.995, 1.996, 2.003, 2.003, 1.997, 2.002, 2.005, 2.006,
       2.004, 1.993, 2.003, 1.993, 2.003, 2.002, 1.997, 2.003],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.992, 2.003, 2.013, 1.996, 2.017, 1.984, 2.   , 1.965, 1.975,
       1.988, 1.992, 2.003, 2.   , 2.002, 2.013, 2.01 , 1.994, 1.999,
       2.006, 1.994, 1.989, 2.003, 1.995, 2.006, 1.993, 2.002, 2.005,
       2.013, 1.995, 2.015, 1.993, 1.996, 2.004, 2.002, 2.   , 2.006,
       2.007, 2.005, 1.999, 1.997, 1.998, 2.012, 2.013, 2.   , 2.017,
       1.989, 1.995, 2.004, 1.994, 2.009, 1.992, 1.992, 2.01 , 1.993,
       1.999, 2.001, 2.008, 2.001, 2.002, 2.009, 2.002, 1.994, 2.004,
       2.001, 1.995, 1.995, 2.002, 2.003, 1.998, 2.002, 2.005, 2.006,
       2.004, 1.993, 2.003, 1.993, 2.003, 2.002, 1.998, 2.003],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.023, 0.047, 0.047, 0.045, 0.049, 0.039, 0.04 , 0.034, 0.051,
       0.036, 0.057, 0.054, 0.047, 0.037, 0.052, 0.053, 0.038, 0.046,
       0.048, 0.07 , 0.062, 0.06 , 0.047, 0.032, 0.034, 0.037, 0.037,
       0.036, 0.035, 0.042, 0.062, 0.042, 0.055, 0.053, 0.042, 0.038,
       0.05 , 0.054, 0.049, 0.027, 0.042, 0.05 , 0.028, 0.057, 0.03 ,
       0.04 , 0.048, 0.029, 0.052, 0.029, 0.04 , 0.046, 0.04 , 0.05 ,
       0.044, 0.05 , 0.039, 0.05 , 0.038, 0.04 , 0.049, 0.045, 0.048,
       0.046, 0.05 , 0.042, 0.048, 0.045, 0.043, 0.045, 0.044, 0.035,
       0.041, 0.034, 0.041, 0.032, 0.041, 0.047, 0.049, 0.04 ],
      dtype=float32)>]
Post training weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[0.000e+00, 1.501e+02],
       [4.101e-02, 9.604e+01],
       [4.075e-02, 1.501e+02],
       [1.204e-01, 1.503e+02],
       [0.000e+00, 1.500e+02],
       [8.671e-02, 9.608e+01],
       [0.000e+00, 9.594e+01],
       [9.201e-02, 9.572e+01],
       [7.607e-02, 9.551e+01],
       [1.455e-01, 9.556e+01],
       [1.177e-01, 9.556e+01],
       [1.290e-01, 9.544e+01],
       [1.492e-01, 9.536e+01],
       [2.044e-01, 9.565e+01],
       [1.832e-01, 9.561e+01],
       [1.948e-01, 9.565e+01],
       [2.146e-01, 1.501e+02],
       [2.570e-01, 9.562e+01],
       [2.356e-01, 9.611e+01],
       [2.706e-01, 9.584e+01],
       [2.970e-01, 9.580e+01],
       [2.401e-01, 9.604e+01],
       [2.837e-01, 9.600e+01],
       [3.082e-01, 9.631e+01],
       [3.678e-01, 6.398e+01],
       [3.444e-01, 9.632e+01],
       [4.148e-01, 6.387e+01],
       [4.256e-01, 9.629e+01],
       [4.128e-01, 6.399e+01],
       [5.872e-01, 6.408e+01],
       [4.730e-01, 6.423e+01],
       [4.987e-01, 6.422e+01],
       [5.055e-01, 6.415e+01],
       [5.456e-01, 6.388e+01],
       [5.607e-01, 6.389e+01],
       [5.819e-01, 6.387e+01],
       [6.347e-01, 6.391e+01],
       [6.671e-01, 6.392e+01],
       [6.819e-01, 4.764e+01],
       [7.546e-01, 4.759e+01],
       [7.686e-01, 4.765e+01],
       [8.247e-01, 4.796e+01],
       [8.216e-01, 4.793e+01],
       [9.044e-01, 4.802e+01],
       [8.551e-01, 4.783e+01],
       [8.886e-01, 4.799e+01],
       [1.021e+00, 4.809e+01],
       [9.850e-01, 3.828e+01],
       [9.464e-01, 3.843e+01],
       [1.057e+00, 3.828e+01],
       [1.217e+00, 3.847e+01],
       [1.187e+00, 3.846e+01],
       [1.180e+00, 3.191e+01],
       [1.195e+00, 3.210e+01],
       [1.191e+00, 3.838e+01],
       [1.280e+00, 3.205e+01],
       [1.442e+00, 3.196e+01],
       [1.422e+00, 3.196e+01],
       [1.436e+00, 2.737e+01],
       [1.434e+00, 2.743e+01],
       [1.613e+00, 3.202e+01],
       [1.679e+00, 2.751e+01],
       [1.708e+00, 2.751e+01],
       [1.728e+00, 2.394e+01],
       [1.887e+00, 2.400e+01],
       [1.899e+00, 2.399e+01],
       [1.952e+00, 2.396e+01],
       [1.988e+00, 2.413e+01],
       [2.026e+00, 2.144e+01],
       [2.176e+00, 2.138e+01],
       [2.231e+00, 1.921e+01],
       [2.201e+00, 1.914e+01],
       [2.405e+00, 2.126e+01],
       [2.362e+00, 1.915e+01],
       [2.484e+00, 1.920e+01],
       [2.606e+00, 1.747e+01],
       [2.767e+00, 1.748e+01],
       [2.883e+00, 1.614e+01],
       [2.894e+00, 1.759e+01],
       [2.983e+00, 1.594e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.369],
         [0.402],
         [0.382],
         [0.392],
         [0.377],
         [0.409],
         [0.374],
         [0.377],
         [0.35 ],
         [0.39 ],
         [0.373],
         [0.395],
         [0.388],
         [0.394],
         [0.391],
         [0.382],
         [0.395],
         [0.396],
         [0.412],
         [0.41 ],
         [0.406],
         [0.42 ],
         [0.403],
         [0.418],
         [0.376],
         [0.411],
         [0.395],
         [0.412],
         [0.396],
         [0.403],
         [0.378],
         [0.378],
         [0.396],
         [0.427],
         [0.429],
         [0.427],
         [0.423],
         [0.419],
         [0.449],
         [0.439],
         [0.423],
         [0.404],
         [0.424],
         [0.386],
         [0.429],
         [0.389],
         [0.391],
         [0.424],
         [0.399],
         [0.416],
         [0.402],
         [0.4  ],
         [0.409],
         [0.4  ],
         [0.408],
         [0.409],
         [0.41 ],
         [0.412],
         [0.411],
         [0.41 ],
         [0.402],
         [0.399],
         [0.392],
         [0.399],
         [0.405],
         [0.401],
         [0.395],
         [0.393],
         [0.392],
         [0.389],
         [0.395],
         [0.399],
         [0.397],
         [0.398],
         [0.394],
         [0.394],
         [0.394],
         [0.394],
         [0.395],
         [0.413]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([0.967, 0.957, 0.97 , 0.964, 0.955, 0.96 , 0.967, 0.967, 0.962,
       0.967, 0.958, 0.956, 0.961, 0.953, 0.95 , 0.953, 0.965, 0.962,
       0.957, 0.97 , 0.973, 0.956, 0.962, 0.948, 0.962, 0.955, 0.956,
       0.949, 0.965, 0.947, 0.97 , 0.968, 0.961, 0.962, 0.963, 0.959,
       0.956, 0.958, 0.964, 0.961, 0.96 , 0.949, 0.946, 0.96 , 0.945,
       0.97 , 0.965, 0.954, 0.966, 0.95 , 0.967, 0.967, 0.95 , 0.967,
       0.962, 0.959, 0.951, 0.959, 0.958, 0.951, 0.957, 0.966, 0.956,
       0.958, 0.965, 0.964, 0.957, 0.957, 0.963, 0.958, 0.955, 0.954,
       0.956, 0.967, 0.957, 0.967, 0.957, 0.958, 0.963, 0.957],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([1.998, 2.01 , 2.015, 1.998, 2.019, 1.992, 2.005, 1.981, 1.981,
       1.994, 1.988, 2.002, 1.994, 2.004, 2.005, 2.003, 1.995, 1.996,
       2.003, 1.989, 1.986, 2.003, 1.996, 2.012, 1.997, 2.004, 2.004,
       2.011, 1.995, 2.013, 1.989, 1.991, 1.998, 1.998, 1.996, 2.   ,
       2.003, 2.001, 1.995, 1.998, 1.999, 2.01 , 2.013, 2.   , 2.015,
       1.99 , 1.995, 2.007, 1.994, 2.011, 1.993, 1.993, 2.01 , 1.993,
       1.998, 2.001, 2.009, 2.001, 2.002, 2.009, 2.003, 1.993, 2.004,
       2.002, 1.995, 1.996, 2.003, 2.003, 1.997, 2.002, 2.005, 2.006,
       2.004, 1.993, 2.003, 1.993, 2.003, 2.002, 1.997, 2.003],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.992, 2.003, 2.013, 1.996, 2.017, 1.984, 2.   , 1.965, 1.975,
       1.988, 1.992, 2.003, 2.   , 2.002, 2.013, 2.01 , 1.994, 1.999,
       2.006, 1.994, 1.989, 2.003, 1.995, 2.006, 1.993, 2.002, 2.005,
       2.013, 1.995, 2.015, 1.993, 1.996, 2.004, 2.002, 2.   , 2.006,
       2.007, 2.005, 1.999, 1.997, 1.998, 2.012, 2.013, 2.   , 2.017,
       1.989, 1.995, 2.004, 1.994, 2.009, 1.992, 1.992, 2.01 , 1.993,
       1.999, 2.001, 2.008, 2.001, 2.002, 2.009, 2.002, 1.994, 2.004,
       2.001, 1.995, 1.995, 2.002, 2.003, 1.998, 2.002, 2.005, 2.006,
       2.004, 1.993, 2.003, 1.993, 2.003, 2.002, 1.998, 2.003],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.023, 0.047, 0.047, 0.045, 0.049, 0.039, 0.04 , 0.034, 0.051,
       0.036, 0.057, 0.054, 0.047, 0.037, 0.052, 0.053, 0.038, 0.046,
       0.048, 0.07 , 0.062, 0.06 , 0.047, 0.032, 0.034, 0.037, 0.037,
       0.036, 0.035, 0.042, 0.062, 0.042, 0.055, 0.053, 0.042, 0.038,
       0.05 , 0.054, 0.049, 0.027, 0.042, 0.05 , 0.028, 0.057, 0.03 ,
       0.04 , 0.048, 0.029, 0.052, 0.029, 0.04 , 0.046, 0.04 , 0.05 ,
       0.044, 0.05 , 0.039, 0.05 , 0.038, 0.04 , 0.049, 0.045, 0.048,
       0.046, 0.05 , 0.042, 0.048, 0.045, 0.043, 0.045, 0.044, 0.035,
       0.041, 0.034, 0.041, 0.032, 0.041, 0.047, 0.049, 0.04 ],
      dtype=float32)>]/home/alirachidi/anaconda3/envs/LungSoundClass/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/alirachidi/classification_algorithm/trainers/modules/main/global_helpers.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
  plt.show()
/home/alirachidi/classification_algorithm/trainers/modules/callbacks/visualizationCallback.py:32: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  print(np.array(self.model._frontend.weights) - np.array(self.first_weights))

Weight difference
[<tf.Tensor: shape=(80, 2), dtype=float32, numpy=
 array([[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]], dtype=float32)>
 <tf.Tensor: shape=(1, 1, 80, 1), dtype=float32, numpy=
 array([[[[0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.]]]], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>   ]
