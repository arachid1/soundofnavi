Tensorflow Version: 2.8.0
Num GPUs Available:  1
Collecting Variables...
All variables have been collected.
../cache/
cw
train79
Description: root mean square loss with leaf bis
-----------------------
Job id is 1.
- Loading Perch.
3278 Perch audios have been loaded.
- Loading Icbhi.
725 Icbhi audios have been loaded.
- Loading Antwerp.
131 Antwerp audios have been loaded.
- Preparing Perch.
862 Perch groups of audio chunks (by filename or patients) have been prepared.
- Preparing Icbhi.
112 Icbhi groups of audio chunks (by filename or patients) have been prepared.
- Preparing Antwerp.
15 Antwerp groups of audio chunks (by filename or patients) have been prepared.
--- Samples are being split into training/val groups and de-grouped by patient ---
--- Perch training dataset went from 0 to 2649 elements, with 2346 none's, 61 crakles, 186 wheezes and 56 both ---
--- Perch Validation dataset contains 629 elements, with 551 none, 12 crackles, 54 wheezes and 12 both ---
--- Icbhi training dataset went from 0 to 2040 elements, with 707 none's, 720 crakles, 285 wheezes and 327 both ---
--- Icbhi Validation dataset contains 299 elements, with 172 none, 70 crackles, 18 wheezes and 39 both ---
--- Antwerp training dataset went from 0 to 580 elements, with 82 none's, 16 crakles, 448 wheezes and 34 both ---
--- Antwerp Validation dataset contains 111 elements, with 17 none, 10 crackles, 5 wheezes and 79 both ---
0
0
0
0
-----------------------
--- Final training dataset went from 0 to 5269 elements, with 3135 none's, 797 crakles, 919 wheezes and 417 both ---
--- Final Validation dataset contains 1039 elements, with 740 none, 92 crackles, 77 wheezes and 130 both ---
Model: "leaf_model9_model_bis_2"
______________________________________________________________________________________________________________
 Layer (type)                                    Output Shape                                Param #          
==============================================================================================================
 leaf (Leaf)                                     multiple                                    560              
                                                                                                              
 mel_filterbanks (MelFilterbanks)                multiple                                    0 (unused)       
                                                                                                              
 sincnet (SincNet)                               multiple                                    0 (unused)       
                                                                                                              
 leaf (Leaf)                                     multiple                                    0 (unused)       
                                                                                                              
 sequential (Sequential)                         (None, 80, 500, 1)                          4                
                                                                                                              
 sequential_1 (Sequential)                       (None, 80, 500, 16)                         2352             
                                                                                                              
 sequential_2 (Sequential)                       (None, 80, 500, 16)                         6448             
                                                                                                              
 sequential_3 (Sequential)                       (None, 80, 500, 16)                         32               
                                                                                                              
 concatenate (Concatenate)                       multiple                                    0                
                                                                                                              
 sequential_4 (Sequential)                       (None, 2)                                   6192322          
                                                                                                              
==============================================================================================================
Total params: 6,202,038
Trainable params: 6,160,532
Non-trainable params: 41,506
______________________________________________________________________________________________________________
Target metric is avg_accuracy
Epoch 1/40
Validation cm: [[  0 740   0   0]
 [  0  92   0   0]
 [  0  77   0   0]
 [  0 130   0   0]]
Validation normalized_cm: [[0. 1. 0. 0.]
 [0. 1. 0. 0.]
 [0. 1. 0. 0.]
 [0. 1. 0. 0.]]
Validation acc: 0.08854667949951876
Validation class_accuracies: [0.0, 1.0, 0.0, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.25
Validation one_indexed_epoch: 1
-- New best results were achieved. --
330/330 - 666s - loss: 0.7203 - accuracy: 0.5701 - 666s/epoch - 2s/step
Epoch 2/40
Validation cm: [[ 35 703   0   2]
 [ 16  73   0   3]
 [  1  73   0   3]
 [ 26  86   0  18]]
Validation normalized_cm: [[0.047 0.95  0.    0.003]
 [0.174 0.793 0.    0.033]
 [0.013 0.948 0.    0.039]
 [0.2   0.662 0.    0.138]]
Validation acc: 0.12127045235803657
Validation class_accuracies: [0.0472972972972973, 0.7934782608695652, 0.0, 0.13846153846153847]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.24480927415710024
Validation one_indexed_epoch: 2
The validation tracker metric at 0.25 hasn't increased by 0 in 1 epochs
330/330 - 722s - loss: 0.6862 - accuracy: 0.5789 - 722s/epoch - 2s/step
Epoch 3/40
Validation cm: [[601  31  41  67]
 [ 59   7   5  21]
 [ 33   0  25  19]
 [ 55   0  30  45]]
Validation normalized_cm: [[0.812 0.042 0.055 0.091]
 [0.641 0.076 0.054 0.228]
 [0.429 0.    0.325 0.247]
 [0.423 0.    0.231 0.346]]
Validation acc: 0.6525505293551492
Validation class_accuracies: [0.8121621621621622, 0.07608695652173914, 0.3246753246753247, 0.34615384615384615]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.38976957237826804
Validation one_indexed_epoch: 3
-- New best results were achieved. --
330/330 - 771s - loss: 0.6848 - accuracy: 0.5920 - 771s/epoch - 2s/step
Epoch 4/40
Validation cm: [[672   0  68   0]
 [ 80   0  12   0]
 [ 50   0  27   0]
 [ 77   0  51   2]]
Validation normalized_cm: [[0.908 0.    0.092 0.   ]
 [0.87  0.    0.13  0.   ]
 [0.649 0.    0.351 0.   ]
 [0.592 0.    0.392 0.015]]
Validation acc: 0.6746871992300288
Validation class_accuracies: [0.9081081081081082, 0.0, 0.35064935064935066, 0.015384615384615385]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.31853551853551854
Validation one_indexed_epoch: 4
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 1 epochs
330/330 - 763s - loss: 0.6843 - accuracy: 0.5950 - 763s/epoch - 2s/step
Epoch 5/40
Validation cm: [[656  66  17   1]
 [ 73  12   7   0]
 [ 50   1  19   7]
 [ 51   5  67   7]]
Validation normalized_cm: [[0.886 0.089 0.023 0.001]
 [0.793 0.13  0.076 0.   ]
 [0.649 0.013 0.247 0.091]
 [0.392 0.038 0.515 0.054]]
Validation acc: 0.6679499518768046
Validation class_accuracies: [0.8864864864864865, 0.13043478260869565, 0.24675324675324675, 0.05384615384615385]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.3293801674236457
Validation one_indexed_epoch: 5
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 2 epochs
330/330 - 768s - loss: 0.6836 - accuracy: 0.5978 - 768s/epoch - 2s/step
Epoch 6/40
Validation cm: [[725  15   0   0]
 [ 89   2   0   1]
 [ 72   3   1   1]
 [121   0   3   6]]
Validation normalized_cm: [[0.98  0.02  0.    0.   ]
 [0.967 0.022 0.    0.011]
 [0.935 0.039 0.013 0.013]
 [0.931 0.    0.023 0.046]]
Validation acc: 0.7064485081809432
Validation class_accuracies: [0.9797297297297297, 0.021739130434782608, 0.012987012987012988, 0.046153846153846156]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.26515242982634285
Validation one_indexed_epoch: 6
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 3 epochs
330/330 - 767s - loss: 0.6834 - accuracy: 0.5897 - 767s/epoch - 2s/step
Epoch 7/40
Validation cm: [[683  44  11   2]
 [ 77  12   2   1]
 [ 69   0   5   3]
 [107   6  17   0]]
Validation normalized_cm: [[0.923 0.059 0.015 0.003]
 [0.837 0.13  0.022 0.011]
 [0.896 0.    0.065 0.039]
 [0.823 0.046 0.131 0.   ]]
Validation acc: 0.6737247353224254
Validation class_accuracies: [0.922972972972973, 0.13043478260869565, 0.06493506493506493, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.27958570512918335
Validation one_indexed_epoch: 7
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 4 epochs
330/330 - 763s - loss: 0.6830 - accuracy: 0.6113 - 763s/epoch - 2s/step
Epoch 8/40
Validation cm: [[672  33  30   5]
 [ 54  22  15   1]
 [ 42   5  26   4]
 [ 37   5  86   2]]
Validation normalized_cm: [[0.908 0.045 0.041 0.007]
 [0.587 0.239 0.163 0.011]
 [0.545 0.065 0.338 0.052]
 [0.285 0.038 0.662 0.015]]
Validation acc: 0.6948989412897016
Validation class_accuracies: [0.9081081081081082, 0.2391304347826087, 0.33766233766233766, 0.015384615384615385]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.3750713739844175
Validation one_indexed_epoch: 8
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 5 epochs
330/330 - 766s - loss: 0.6828 - accuracy: 0.6172 - 766s/epoch - 2s/step
Epoch 9/40
Validation cm: [[739   0   0   1]
 [ 89   1   0   2]
 [ 64   3   2   8]
 [126   1   0   3]]
Validation normalized_cm: [[0.999 0.    0.    0.001]
 [0.967 0.011 0.    0.022]
 [0.831 0.039 0.026 0.104]
 [0.969 0.008 0.    0.023]]
Validation acc: 0.7170356111645814
Validation class_accuracies: [0.9986486486486487, 0.010869565217391304, 0.025974025974025976, 0.023076923076923078]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.2646422907292472
Validation one_indexed_epoch: 9
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 6 epochs
330/330 - 774s - loss: 0.6821 - accuracy: 0.6200 - 774s/epoch - 2s/step
Epoch 10/40
Validation cm: [[727   1  12   0]
 [ 87   0   4   1]
 [ 52   0  23   2]
 [ 96   0  33   1]]
Validation normalized_cm: [[0.982 0.001 0.016 0.   ]
 [0.946 0.    0.043 0.011]
 [0.675 0.    0.299 0.026]
 [0.738 0.    0.254 0.008]]
Validation acc: 0.7228103946102021
Validation class_accuracies: [0.9824324324324324, 0.0, 0.2987012987012987, 0.007692307692307693]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.32220650970650966
Validation one_indexed_epoch: 10
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 7 epochs
330/330 - 767s - loss: 0.6821 - accuracy: 0.6111 - 767s/epoch - 2s/step
Epoch 11/40
Validation cm: [[699  12  29   0]
 [ 75   6  11   0]
 [ 52   1  24   0]
 [ 47   2  81   0]]
Validation normalized_cm: [[0.945 0.016 0.039 0.   ]
 [0.815 0.065 0.12  0.   ]
 [0.675 0.013 0.312 0.   ]
 [0.362 0.015 0.623 0.   ]]
Validation acc: 0.7016361886429259
Validation class_accuracies: [0.9445945945945946, 0.06521739130434782, 0.3116883116883117, 0.0]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.3303750743968136
Validation one_indexed_epoch: 11
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 8 epochs
330/330 - 799s - loss: 0.6820 - accuracy: 0.6142 - 799s/epoch - 2s/step
Epoch 12/40
Validation cm: [[722  14   4   0]
 [ 76   9   7   0]
 [ 53  10   6   8]
 [ 74  22  27   7]]
Validation normalized_cm: [[0.976 0.019 0.005 0.   ]
 [0.826 0.098 0.076 0.   ]
 [0.688 0.13  0.078 0.104]
 [0.569 0.169 0.208 0.054]]
Validation acc: 0.7160731472569779
Validation class_accuracies: [0.9756756756756757, 0.09782608695652174, 0.07792207792207792, 0.05384615384615385]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.3013174986001073
Validation one_indexed_epoch: 12
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 9 epochs
330/330 - 812s - loss: 0.6821 - accuracy: 0.6250 - 812s/epoch - 2s/step
Epoch 13/40
Validation cm: [[729   8   3   0]
 [ 87   5   0   0]
 [ 62   0  15   0]
 [ 78   1  50   1]]
Validation normalized_cm: [[0.985 0.011 0.004 0.   ]
 [0.946 0.054 0.    0.   ]
 [0.805 0.    0.195 0.   ]
 [0.6   0.008 0.385 0.008]]
Validation acc: 0.7218479307025987
Validation class_accuracies: [0.9851351351351352, 0.05434782608695652, 0.19480519480519481, 0.007692307692307693]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.31049511592989854
Validation one_indexed_epoch: 13
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 10 epochs
330/330 - 793s - loss: 0.6822 - accuracy: 0.6037 - 793s/epoch - 2s/step
Epoch 14/40
Validation cm: [[593  60  65  22]
 [ 38  16  21  17]
 [ 36   3  29   9]
 [ 11   6 102  11]]
Validation normalized_cm: [[0.801 0.081 0.088 0.03 ]
 [0.413 0.174 0.228 0.185]
 [0.468 0.039 0.377 0.117]
 [0.085 0.046 0.785 0.085]]
Validation acc: 0.6246390760346487
Validation class_accuracies: [0.8013513513513514, 0.17391304347826086, 0.37662337662337664, 0.08461538461538462]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.35912578901709336
Validation one_indexed_epoch: 14
The validation tracker metric at 0.38976957237826804 hasn't increased by 0 in 11 epochs
330/330 - 773s - loss: 0.6819 - accuracy: 0.6030 - 773s/epoch - 2s/step
Epoch 15/40
Validation cm: [[710  30   0   0]
 [ 74  18   0   0]
 [ 71   2   2   2]
 [ 95  33   0   2]]
Validation normalized_cm: [[0.959 0.041 0.    0.   ]
 [0.804 0.196 0.    0.   ]
 [0.922 0.026 0.026 0.026]
 [0.731 0.254 0.    0.015]]
Validation acc: 0.7045235803657363
Validation class_accuracies: [0.9594594594594594, 0.1956521739130435, 0.025974025974025976, 0.015384615384615385]
Validation precision: None
Validation recall: None
Validation f1: None
Validation roc_auc: None
Validation avg_accuracy: 0.29911756868278605
Validation one_indexed_epoch: 15
The number of epochs since last 1% equals the patience
330/330 - 767s - loss: 0.6818 - accuracy: 0.6045 - 767s/epoch - 2s/step
----------------------------------
The best metrics for this job are: 

Best avg_accuracy: 0.38976957237826804
Best cm: [[601  31  41  67]
 [ 59   7   5  21]
 [ 33   0  25  19]
 [ 55   0  30  45]]
Best normalized_cm: [[0.812 0.042 0.055 0.091]
 [0.641 0.076 0.054 0.228]
 [0.429 0.    0.325 0.247]
 [0.423 0.    0.231 0.346]]
Best acc: 0.6525505293551492
Best class_accuracies: [0.8121621621621622, 0.07608695652173914, 0.3246753246753247, 0.34615384615384615]
Best precision: None
Best recall: None
Best f1: None
Best roc_auc: None
Best one_indexed_epoch: 3
avg_accuracy
model
cm
normalized_cm
acc
class_accuracies
precision
recall
f1
roc_auc
one_indexed_epoch
Initial weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[1.325e-02, 1.503e+02],
       [3.803e-02, 9.266e+01],
       [4.359e-02, 1.491e+02],
       [6.414e-02, 1.499e+02],
       [7.351e-02, 1.500e+02],
       [8.700e-02, 9.299e+01],
       [9.422e-02, 9.392e+01],
       [1.017e-01, 9.476e+01],
       [1.112e-01, 9.624e+01],
       [1.185e-01, 9.668e+01],
       [1.373e-01, 9.803e+01],
       [1.542e-01, 9.675e+01],
       [1.656e-01, 9.756e+01],
       [1.729e-01, 9.723e+01],
       [1.852e-01, 9.773e+01],
       [1.953e-01, 9.874e+01],
       [2.107e-01, 1.488e+02],
       [2.314e-01, 9.644e+01],
       [2.503e-01, 9.795e+01],
       [2.782e-01, 9.633e+01],
       [2.783e-01, 9.678e+01],
       [3.061e-01, 9.613e+01],
       [3.179e-01, 9.612e+01],
       [3.238e-01, 9.607e+01],
       [3.568e-01, 6.146e+01],
       [3.771e-01, 9.611e+01],
       [3.945e-01, 6.243e+01],
       [4.252e-01, 9.590e+01],
       [4.362e-01, 6.220e+01],
       [4.592e-01, 6.239e+01],
       [4.871e-01, 6.367e+01],
       [5.057e-01, 6.387e+01],
       [5.305e-01, 6.380e+01],
       [5.709e-01, 6.374e+01],
       [5.869e-01, 6.362e+01],
       [6.084e-01, 6.376e+01],
       [6.328e-01, 6.376e+01],
       [6.508e-01, 6.329e+01],
       [6.794e-01, 4.733e+01],
       [7.199e-01, 4.709e+01],
       [7.533e-01, 4.789e+01],
       [7.899e-01, 4.784e+01],
       [8.027e-01, 4.774e+01],
       [8.353e-01, 4.784e+01],
       [8.662e-01, 4.764e+01],
       [9.067e-01, 4.780e+01],
       [9.171e-01, 4.785e+01],
       [9.890e-01, 3.820e+01],
       [1.008e+00, 3.835e+01],
       [1.085e+00, 3.839e+01],
       [1.152e+00, 3.840e+01],
       [1.145e+00, 3.829e+01],
       [1.184e+00, 3.192e+01],
       [1.220e+00, 3.190e+01],
       [1.220e+00, 3.832e+01],
       [1.304e+00, 3.207e+01],
       [1.374e+00, 3.207e+01],
       [1.394e+00, 3.207e+01],
       [1.470e+00, 2.739e+01],
       [1.517e+00, 2.746e+01],
       [1.539e+00, 3.213e+01],
       [1.643e+00, 2.755e+01],
       [1.695e+00, 2.758e+01],
       [1.730e+00, 2.430e+01],
       [1.795e+00, 2.397e+01],
       [1.878e+00, 2.381e+01],
       [1.913e+00, 2.405e+01],
       [1.991e+00, 2.401e+01],
       [2.094e+00, 2.125e+01],
       [2.150e+00, 2.139e+01],
       [2.233e+00, 1.911e+01],
       [2.269e+00, 1.888e+01],
       [2.345e+00, 2.131e+01],
       [2.440e+00, 1.930e+01],
       [2.498e+00, 1.895e+01],
       [2.580e+00, 1.750e+01],
       [2.635e+00, 1.735e+01],
       [2.637e+00, 1.587e+01],
       [2.685e+00, 1.740e+01],
       [2.881e+00, 1.610e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.5  ],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.5  ],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.5  ],
         [0.5  ],
         [0.5  ],
         [0.5  ],
         [0.476],
         [0.501],
         [0.5  ],
         [0.433],
         [0.436],
         [0.443],
         [0.445],
         [0.451],
         [0.43 ],
         [0.445],
         [0.448],
         [0.432],
         [0.448],
         [0.408],
         [0.42 ],
         [0.418],
         [0.409],
         [0.41 ],
         [0.41 ],
         [0.405],
         [0.408],
         [0.405],
         [0.41 ],
         [0.397],
         [0.404],
         [0.406],
         [0.405],
         [0.402],
         [0.402],
         [0.399],
         [0.402],
         [0.405],
         [0.403],
         [0.4  ],
         [0.404],
         [0.4  ],
         [0.4  ],
         [0.405],
         [0.407],
         [0.4  ],
         [0.401],
         [0.399],
         [0.396],
         [0.403],
         [0.408],
         [0.405],
         [0.401],
         [0.405],
         [0.4  ],
         [0.404],
         [0.408],
         [0.403],
         [0.398]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([1.004, 1.003, 1.005, 1.003, 1.003, 1.003, 1.003, 1.003, 1.004,
       1.002, 1.003, 0.855, 0.841, 1.001, 1.001, 1.001, 0.838, 0.864,
       0.885, 0.855, 0.878, 0.858, 0.893, 0.886, 0.898, 0.893, 0.903,
       0.895, 0.889, 0.89 , 0.9  , 0.896, 0.895, 0.894, 0.891, 0.887,
       0.885, 0.884, 0.88 , 0.878, 0.876, 0.874, 0.865, 0.856, 0.849,
       0.846, 0.842, 0.847, 0.844, 0.842, 0.837, 0.842, 0.838, 0.838,
       0.837, 0.837, 0.833, 0.832, 0.835, 0.833, 0.831, 0.834, 0.831,
       0.83 , 0.833, 0.831, 0.832, 0.832, 0.831, 0.828, 0.832, 0.831,
       0.831, 0.831, 0.831, 0.831, 0.83 , 0.83 , 0.831, 0.83 ],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([0.793, 0.728, 1.237, 0.717, 0.787, 0.699, 0.789, 0.98 , 0.954,
       1.076, 1.129, 0.238, 0.153, 1.883, 1.974, 1.806, 0.194, 1.107,
       0.866, 0.995, 0.879, 0.822, 1.206, 1.163, 1.446, 1.564, 1.735,
       1.679, 1.603, 1.663, 1.954, 1.901, 1.97 , 2.058, 1.998, 2.007,
       2.031, 1.991, 1.994, 2.048, 2.065, 2.083, 2.055, 2.093, 2.106,
       2.112, 2.122, 2.132, 2.156, 2.138, 2.126, 2.132, 2.138, 2.125,
       2.133, 2.125, 2.132, 2.133, 2.128, 2.13 , 2.136, 2.129, 2.131,
       2.147, 2.126, 2.13 , 2.13 , 2.129, 2.138, 2.135, 2.13 , 2.125,
       2.126, 2.13 , 2.121, 2.13 , 2.129, 2.13 , 2.13 , 2.131],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.661, 1.871, 1.694, 1.988, 2.043, 2.185, 2.19 , 2.131, 2.249,
       2.247, 2.311, 1.69 , 1.901, 2.244, 2.289, 2.445, 1.797, 1.274,
       1.79 , 1.251, 1.66 , 1.372, 1.743, 1.755, 1.907, 1.818, 1.966,
       1.935, 1.846, 1.899, 2.109, 2.082, 2.124, 2.135, 2.114, 2.098,
       2.108, 2.091, 2.079, 2.102, 2.105, 2.109, 2.086, 2.096, 2.104,
       2.118, 2.122, 2.13 , 2.128, 2.134, 2.114, 2.131, 2.114, 2.122,
       2.124, 2.114, 2.097, 2.101, 2.114, 2.111, 2.099, 2.115, 2.109,
       2.077, 2.132, 2.122, 2.113, 2.12 , 2.109, 2.123, 2.122, 2.123,
       2.131, 2.114, 2.13 , 2.118, 2.12 , 2.12 , 2.123, 2.122],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.447, 0.993, 0.993, 0.995, 0.992, 0.984, 0.986, 0.984, 0.981,
       0.968, 0.947, 0.958, 0.895, 1.002, 1.   , 0.889, 0.807, 1.002,
       0.614, 1.002, 0.68 , 0.903, 0.593, 0.573, 0.449, 0.557, 0.398,
       0.454, 0.482, 0.455, 0.281, 0.303, 0.259, 0.243, 0.25 , 0.229,
       0.224, 0.275, 0.246, 0.209, 0.176, 0.173, 0.158, 0.132, 0.16 ,
       0.114, 0.108, 0.134, 0.117, 0.119, 0.102, 0.104, 0.099, 0.099,
       0.097, 0.09 , 0.084, 0.082, 0.088, 0.082, 0.077, 0.078, 0.071,
       0.072, 0.103, 0.121, 0.083, 0.076, 0.09 , 0.086, 0.092, 0.121,
       0.085, 0.067, 0.113, 0.08 , 0.1  , 0.115, 0.1  , 0.079],
      dtype=float32)>]
Post training weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[1.325e-02, 1.503e+02],
       [3.803e-02, 9.266e+01],
       [4.359e-02, 1.491e+02],
       [6.414e-02, 1.499e+02],
       [7.351e-02, 1.500e+02],
       [8.700e-02, 9.299e+01],
       [9.422e-02, 9.392e+01],
       [1.017e-01, 9.476e+01],
       [1.112e-01, 9.624e+01],
       [1.185e-01, 9.668e+01],
       [1.373e-01, 9.803e+01],
       [1.542e-01, 9.675e+01],
       [1.656e-01, 9.756e+01],
       [1.729e-01, 9.723e+01],
       [1.852e-01, 9.773e+01],
       [1.953e-01, 9.874e+01],
       [2.107e-01, 1.488e+02],
       [2.314e-01, 9.644e+01],
       [2.503e-01, 9.795e+01],
       [2.782e-01, 9.633e+01],
       [2.783e-01, 9.678e+01],
       [3.061e-01, 9.613e+01],
       [3.179e-01, 9.612e+01],
       [3.238e-01, 9.607e+01],
       [3.568e-01, 6.146e+01],
       [3.771e-01, 9.611e+01],
       [3.945e-01, 6.243e+01],
       [4.252e-01, 9.590e+01],
       [4.362e-01, 6.220e+01],
       [4.592e-01, 6.239e+01],
       [4.871e-01, 6.367e+01],
       [5.057e-01, 6.387e+01],
       [5.305e-01, 6.380e+01],
       [5.709e-01, 6.374e+01],
       [5.869e-01, 6.362e+01],
       [6.084e-01, 6.376e+01],
       [6.328e-01, 6.376e+01],
       [6.508e-01, 6.329e+01],
       [6.794e-01, 4.733e+01],
       [7.199e-01, 4.709e+01],
       [7.533e-01, 4.789e+01],
       [7.899e-01, 4.784e+01],
       [8.027e-01, 4.774e+01],
       [8.353e-01, 4.784e+01],
       [8.662e-01, 4.764e+01],
       [9.067e-01, 4.780e+01],
       [9.171e-01, 4.785e+01],
       [9.890e-01, 3.820e+01],
       [1.008e+00, 3.835e+01],
       [1.085e+00, 3.839e+01],
       [1.152e+00, 3.840e+01],
       [1.145e+00, 3.829e+01],
       [1.184e+00, 3.192e+01],
       [1.220e+00, 3.190e+01],
       [1.220e+00, 3.832e+01],
       [1.304e+00, 3.207e+01],
       [1.374e+00, 3.207e+01],
       [1.394e+00, 3.207e+01],
       [1.470e+00, 2.739e+01],
       [1.517e+00, 2.746e+01],
       [1.539e+00, 3.213e+01],
       [1.643e+00, 2.755e+01],
       [1.695e+00, 2.758e+01],
       [1.730e+00, 2.430e+01],
       [1.795e+00, 2.397e+01],
       [1.878e+00, 2.381e+01],
       [1.913e+00, 2.405e+01],
       [1.991e+00, 2.401e+01],
       [2.094e+00, 2.125e+01],
       [2.150e+00, 2.139e+01],
       [2.233e+00, 1.911e+01],
       [2.269e+00, 1.888e+01],
       [2.345e+00, 2.131e+01],
       [2.440e+00, 1.930e+01],
       [2.498e+00, 1.895e+01],
       [2.580e+00, 1.750e+01],
       [2.635e+00, 1.735e+01],
       [2.637e+00, 1.587e+01],
       [2.685e+00, 1.740e+01],
       [2.881e+00, 1.610e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.5  ],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.5  ],
         [0.501],
         [0.501],
         [0.501],
         [0.501],
         [0.5  ],
         [0.5  ],
         [0.5  ],
         [0.5  ],
         [0.476],
         [0.501],
         [0.5  ],
         [0.433],
         [0.436],
         [0.443],
         [0.445],
         [0.451],
         [0.43 ],
         [0.445],
         [0.448],
         [0.432],
         [0.448],
         [0.408],
         [0.42 ],
         [0.418],
         [0.409],
         [0.41 ],
         [0.41 ],
         [0.405],
         [0.408],
         [0.405],
         [0.41 ],
         [0.397],
         [0.404],
         [0.406],
         [0.405],
         [0.402],
         [0.402],
         [0.399],
         [0.402],
         [0.405],
         [0.403],
         [0.4  ],
         [0.404],
         [0.4  ],
         [0.4  ],
         [0.405],
         [0.407],
         [0.4  ],
         [0.401],
         [0.399],
         [0.396],
         [0.403],
         [0.408],
         [0.405],
         [0.401],
         [0.405],
         [0.4  ],
         [0.404],
         [0.408],
         [0.403],
         [0.398]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([1.004, 1.003, 1.005, 1.003, 1.003, 1.003, 1.003, 1.003, 1.004,
       1.002, 1.003, 0.855, 0.841, 1.001, 1.001, 1.001, 0.838, 0.864,
       0.885, 0.855, 0.878, 0.858, 0.893, 0.886, 0.898, 0.893, 0.903,
       0.895, 0.889, 0.89 , 0.9  , 0.896, 0.895, 0.894, 0.891, 0.887,
       0.885, 0.884, 0.88 , 0.878, 0.876, 0.874, 0.865, 0.856, 0.849,
       0.846, 0.842, 0.847, 0.844, 0.842, 0.837, 0.842, 0.838, 0.838,
       0.837, 0.837, 0.833, 0.832, 0.835, 0.833, 0.831, 0.834, 0.831,
       0.83 , 0.833, 0.831, 0.832, 0.832, 0.831, 0.828, 0.832, 0.831,
       0.831, 0.831, 0.831, 0.831, 0.83 , 0.83 , 0.831, 0.83 ],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([0.793, 0.728, 1.237, 0.717, 0.787, 0.699, 0.789, 0.98 , 0.954,
       1.076, 1.129, 0.238, 0.153, 1.883, 1.974, 1.806, 0.194, 1.107,
       0.866, 0.995, 0.879, 0.822, 1.206, 1.163, 1.446, 1.564, 1.735,
       1.679, 1.603, 1.663, 1.954, 1.901, 1.97 , 2.058, 1.998, 2.007,
       2.031, 1.991, 1.994, 2.048, 2.065, 2.083, 2.055, 2.093, 2.106,
       2.112, 2.122, 2.132, 2.156, 2.138, 2.126, 2.132, 2.138, 2.125,
       2.133, 2.125, 2.132, 2.133, 2.128, 2.13 , 2.136, 2.129, 2.131,
       2.147, 2.126, 2.13 , 2.13 , 2.129, 2.138, 2.135, 2.13 , 2.125,
       2.126, 2.13 , 2.121, 2.13 , 2.129, 2.13 , 2.13 , 2.131],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.661, 1.871, 1.694, 1.988, 2.043, 2.185, 2.19 , 2.131, 2.249,
       2.247, 2.311, 1.69 , 1.901, 2.244, 2.289, 2.445, 1.797, 1.274,
       1.79 , 1.251, 1.66 , 1.372, 1.743, 1.755, 1.907, 1.818, 1.966,
       1.935, 1.846, 1.899, 2.109, 2.082, 2.124, 2.135, 2.114, 2.098,
       2.108, 2.091, 2.079, 2.102, 2.105, 2.109, 2.086, 2.096, 2.104,
       2.118, 2.122, 2.13 , 2.128, 2.134, 2.114, 2.131, 2.114, 2.122,
       2.124, 2.114, 2.097, 2.101, 2.114, 2.111, 2.099, 2.115, 2.109,
       2.077, 2.132, 2.122, 2.113, 2.12 , 2.109, 2.123, 2.122, 2.123,
       2.131, 2.114, 2.13 , 2.118, 2.12 , 2.12 , 2.123, 2.122],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.447, 0.993, 0.993, 0.995, 0.992, 0.984, 0.986, 0.984, 0.981,
       0.968, 0.947, 0.958, 0.895, 1.002, 1.   , 0.889, 0.807, 1.002,
       0.614, 1.002, 0.68 , 0.903, 0.593, 0.573, 0.449, 0.557, 0.398,
       0.454, 0.482, 0.455, 0.281, 0.303, 0.259, 0.243, 0.25 , 0.229,
       0.224, 0.275, 0.246, 0.209, 0.176, 0.173, 0.158, 0.132, 0.16 ,
       0.114, 0.108, 0.134, 0.117, 0.119, 0.102, 0.104, 0.099, 0.099,
       0.097, 0.09 , 0.084, 0.082, 0.088, 0.082, 0.077, 0.078, 0.071,
       0.072, 0.103, 0.121, 0.083, 0.076, 0.09 , 0.086, 0.092, 0.121,
       0.085, 0.067, 0.113, 0.08 , 0.1  , 0.115, 0.1  , 0.079],
      dtype=float32)>]/home/alirachidi/classification_algorithm/trainers/modules/main/global_helpers.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
  plt.show()
/home/alirachidi/classification_algorithm/trainers/modules/callbacks/visualizationCallback.py:32: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  print(np.array(self.model._frontend.weights) - np.array(self.first_weights))

Weight difference
[<tf.Tensor: shape=(80, 2), dtype=float32, numpy=
 array([[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]], dtype=float32)>
 <tf.Tensor: shape=(1, 1, 80, 1), dtype=float32, numpy=
 array([[[[0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.]]]], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>   ]
