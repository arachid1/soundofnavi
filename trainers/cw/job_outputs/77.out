Tensorflow Version: 2.8.0
Num GPUs Available:  1
Collecting Variables...
All variables have been collected.
../cache/
cw
train77
Description: root mean square loss
-----------------------
Job id is 1.
- Loading Perch.
3278 Perch audios have been loaded.
- Loading Icbhi.
725 Icbhi audios have been loaded.
- Loading Antwerp.
131 Antwerp audios have been loaded.
- Preparing Perch.
862 Perch groups of audio chunks (by filename or patients) have been prepared.
- Preparing Icbhi.
112 Icbhi groups of audio chunks (by filename or patients) have been prepared.
- Preparing Antwerp.
15 Antwerp groups of audio chunks (by filename or patients) have been prepared.
--- Samples are being split into training/val groups and de-grouped by patient ---
--- Perch training dataset went from 0 to 2649 elements, with 2346 none's, 61 crakles, 186 wheezes and 56 both ---
--- Perch Validation dataset contains 629 elements, with 551 none, 12 crackles, 54 wheezes and 12 both ---
--- Icbhi training dataset went from 0 to 2040 elements, with 707 none's, 720 crakles, 285 wheezes and 327 both ---
--- Icbhi Validation dataset contains 299 elements, with 172 none, 70 crackles, 18 wheezes and 39 both ---
--- Antwerp training dataset went from 0 to 580 elements, with 82 none's, 16 crakles, 448 wheezes and 34 both ---
--- Antwerp Validation dataset contains 111 elements, with 17 none, 10 crackles, 5 wheezes and 79 both ---
3908
1138
964
298
-----------------------
--- Final training dataset went from 0 to 5046 elements, with 3908 0's, 1138 1's and 0 others ---
--- Final Validation dataset contains 1262 elements, with 964 0's and 298 1's ---
Model: "leaf_model9_model_bis"
______________________________________________________________________________________________________________
 Layer (type)                                    Output Shape                                Param #          
==============================================================================================================
 leaf (Leaf)                                     multiple                                    560              
                                                                                                              
 mel_filterbanks (MelFilterbanks)                multiple                                    0 (unused)       
                                                                                                              
 sincnet (SincNet)                               multiple                                    0 (unused)       
                                                                                                              
 sequential (Sequential)                         (None, 80, 500, 1)                          4                
                                                                                                              
 sequential_1 (Sequential)                       (None, 80, 500, 16)                         2352             
                                                                                                              
 sequential_2 (Sequential)                       (None, 80, 500, 16)                         6448             
                                                                                                              
 sequential_3 (Sequential)                       (None, 80, 500, 16)                         32               
                                                                                                              
 concatenate (Concatenate)                       multiple                                    0                
                                                                                                              
 sequential_4 (Sequential)                       (None, 1)                                   6191809          
                                                                                                              
==============================================================================================================
Total params: 6,201,365
Trainable params: 6,159,859
Non-trainable params: 41,506
______________________________________________________________________________________________________________
Target metric is avg_accuracy
Epoch 1/25
Validation cm: [[964   0]
 [298   0]]
Validation normalized_cm: [[1. 0.]
 [1. 0.]]
Validation acc: 0.7638668779714739
Validation class_accuracies: [1.0, 0.0]
Validation precision: 0.0
Validation recall: 0.0
Validation f1: 0.0
Validation roc_auc: 0.31301171015622825
Validation avg_accuracy: 0.5
Validation one_indexed_epoch: 1
-- New best results were achieved. --
Patient Confusion matrix: 
 [[693   0]
 [ 47   0]] 
Patient Normalized Confusion matrix: 
 [[1. 0.]
 [1. 0.]] 
Patient Validation accuracy: 
 93.65 
Patient Validation class accuracies: 
 [1.0, 0.0] 
316/316 - 655s - loss: 0.5221 - accuracy: 0.7628 - 655s/epoch - 2s/step
Epoch 2/25
Validation cm: [[963   1]
 [298   0]]
Validation normalized_cm: [[0.999 0.001]
 [1.    0.   ]]
Validation acc: 0.7630744849445324
Validation class_accuracies: [0.9989626556016598, 0.0]
Validation precision: 0.0
Validation recall: 0.0
Validation f1: 0.0
Validation roc_auc: 0.7904773176640953
Validation avg_accuracy: 0.4994813278008299
Validation one_indexed_epoch: 2
The validation tracker metric at 0.5 hasn't increased by 0 in 1 epochs
316/316 - 641s - loss: 0.4243 - accuracy: 0.7887 - 641s/epoch - 2s/step
Epoch 3/25
Validation cm: [[189 775]
 [ 15 283]]
Validation normalized_cm: [[0.196 0.804]
 [0.05  0.95 ]]
Validation acc: 0.37400950871632327
Validation class_accuracies: [0.19605809128630705, 0.9496644295302014]
Validation precision: 0.2674858223062382
Validation recall: 0.9496644295302014
Validation f1: 0.4174041297935103
Validation roc_auc: 0.6532380461722689
Validation avg_accuracy: 0.5728612604082542
Validation one_indexed_epoch: 3
-- New best results were achieved. --
Patient Confusion matrix: 
 [[167 526]
 [  4  43]] 
Patient Normalized Confusion matrix: 
 [[0.241 0.759]
 [0.085 0.915]] 
Patient Validation accuracy: 
 28.38 
Patient Validation class accuracies: 
 [0.240981240981241, 0.9148936170212766] 
316/316 - 643s - loss: 0.4235 - accuracy: 0.7862 - 643s/epoch - 2s/step
Epoch 4/25
Validation cm: [[940  24]
 [261  37]]
Validation normalized_cm: [[0.975 0.025]
 [0.876 0.124]]
Validation acc: 0.7741679873217115
Validation class_accuracies: [0.975103734439834, 0.12416107382550336]
Validation precision: 0.6065573770491803
Validation recall: 0.12416107382550336
Validation f1: 0.20612813370473537
Validation roc_auc: 0.44101061015344345
Validation avg_accuracy: 0.5496324041326687
Validation one_indexed_epoch: 4
The validation tracker metric at 0.5728612604082542 hasn't increased by 0 in 1 epochs
316/316 - 647s - loss: 0.4113 - accuracy: 0.7977 - 647s/epoch - 2s/step
Epoch 5/25
Validation cm: [[956   8]
 [290   8]]
Validation normalized_cm: [[0.992 0.008]
 [0.973 0.027]]
Validation acc: 0.7638668779714739
Validation class_accuracies: [0.991701244813278, 0.026845637583892617]
Validation precision: 0.5
Validation recall: 0.026845637583892617
Validation f1: 0.050955414012738856
Validation roc_auc: 0.6745836698320755
Validation avg_accuracy: 0.5092734411985853
Validation one_indexed_epoch: 5
The validation tracker metric at 0.5728612604082542 hasn't increased by 0 in 2 epochs
316/316 - 646s - loss: 0.4030 - accuracy: 0.8044 - 646s/epoch - 2s/step
Epoch 6/25
Validation cm: [[954  10]
 [252  46]]
Validation normalized_cm: [[0.99  0.01 ]
 [0.846 0.154]]
Validation acc: 0.7923930269413629
Validation class_accuracies: [0.9896265560165975, 0.15436241610738255]
Validation precision: 0.8214285714285714
Validation recall: 0.15436241610738255
Validation f1: 0.2598870056497175
Validation roc_auc: 0.7273733604388872
Validation avg_accuracy: 0.5719944860619901
Validation one_indexed_epoch: 6
The validation tracker metric at 0.5728612604082542 hasn't increased by 0 in 3 epochs
316/316 - 583s - loss: 0.3886 - accuracy: 0.8068 - 583s/epoch - 2s/step
Epoch 7/25
Validation cm: [[910  54]
 [228  70]]
Validation normalized_cm: [[0.944 0.056]
 [0.765 0.235]]
Validation acc: 0.7765451664025357
Validation class_accuracies: [0.9439834024896265, 0.2348993288590604]
Validation precision: 0.5645161290322581
Validation recall: 0.2348993288590604
Validation f1: 0.33175355450236965
Validation roc_auc: 0.6044515302570386
Validation avg_accuracy: 0.5894413656743435
Validation one_indexed_epoch: 7
-- New best results were achieved. --
Patient Confusion matrix: 
 [[668  25]
 [ 30  17]] 
Patient Normalized Confusion matrix: 
 [[0.964 0.036]
 [0.638 0.362]] 
Patient Validation accuracy: 
 92.57 
Patient Validation class accuracies: 
 [0.963924963924964, 0.3617021276595745] 
316/316 - 585s - loss: 0.3765 - accuracy: 0.8175 - 585s/epoch - 2s/step
Epoch 8/25
Validation cm: [[836 128]
 [124 174]]
Validation normalized_cm: [[0.867 0.133]
 [0.416 0.584]]
Validation acc: 0.8003169572107766
Validation class_accuracies: [0.8672199170124482, 0.5838926174496645]
Validation precision: 0.5761589403973509
Validation recall: 0.5838926174496645
Validation f1: 0.58
Validation roc_auc: 0.8353650895318722
Validation avg_accuracy: 0.7255562672310563
Validation one_indexed_epoch: 8
-- New best results were achieved. --
Patient Confusion matrix: 
 [[655  38]
 [ 30  17]] 
Patient Normalized Confusion matrix: 
 [[0.945 0.055]
 [0.638 0.362]] 
Patient Validation accuracy: 
 90.81 
Patient Validation class accuracies: 
 [0.9451659451659452, 0.3617021276595745] 
316/316 - 581s - loss: 0.3695 - accuracy: 0.8226 - 581s/epoch - 2s/step
Epoch 9/25
Validation cm: [[898  66]
 [192 106]]
Validation normalized_cm: [[0.932 0.068]
 [0.644 0.356]]
Validation acc: 0.7955625990491284
Validation class_accuracies: [0.9315352697095436, 0.35570469798657717]
Validation precision: 0.6162790697674418
Validation recall: 0.35570469798657717
Validation f1: 0.45106382978723397
Validation roc_auc: 0.8156729510707622
Validation avg_accuracy: 0.6436199838480604
Validation one_indexed_epoch: 9
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 1 epochs
316/316 - 579s - loss: 0.3622 - accuracy: 0.8216 - 579s/epoch - 2s/step
Epoch 10/25
Validation cm: [[271 693]
 [ 16 282]]
Validation normalized_cm: [[0.281 0.719]
 [0.054 0.946]]
Validation acc: 0.4381933438985737
Validation class_accuracies: [0.28112033195020747, 0.9463087248322147]
Validation precision: 0.28923076923076924
Validation recall: 0.9463087248322147
Validation f1: 0.4430479183032207
Validation roc_auc: 0.6766931688434654
Validation avg_accuracy: 0.6137145283912111
Validation one_indexed_epoch: 10
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 2 epochs
316/316 - 590s - loss: 0.3463 - accuracy: 0.8353 - 590s/epoch - 2s/step
Epoch 11/25
Validation cm: [[954  10]
 [262  36]]
Validation normalized_cm: [[0.99  0.01 ]
 [0.879 0.121]]
Validation acc: 0.7844690966719493
Validation class_accuracies: [0.9896265560165975, 0.12080536912751678]
Validation precision: 0.782608695652174
Validation recall: 0.12080536912751678
Validation f1: 0.20930232558139533
Validation roc_auc: 0.854319251441143
Validation avg_accuracy: 0.5552159625720572
Validation one_indexed_epoch: 11
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 3 epochs
316/316 - 578s - loss: 0.3430 - accuracy: 0.8403 - 578s/epoch - 2s/step
Epoch 12/25
Validation cm: [[950  14]
 [256  42]]
Validation normalized_cm: [[0.985 0.015]
 [0.859 0.141]]
Validation acc: 0.786053882725832
Validation class_accuracies: [0.9854771784232366, 0.14093959731543623]
Validation precision: 0.75
Validation recall: 0.14093959731543623
Validation f1: 0.2372881355932203
Validation roc_auc: 0.7712237879083238
Validation avg_accuracy: 0.5632083878693364
Validation one_indexed_epoch: 12
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 4 epochs
316/316 - 592s - loss: 0.3355 - accuracy: 0.8397 - 592s/epoch - 2s/step
Epoch 13/25
Validation cm: [[935  29]
 [236  62]]
Validation normalized_cm: [[0.97  0.03 ]
 [0.792 0.208]]
Validation acc: 0.7900158478605388
Validation class_accuracies: [0.9699170124481328, 0.2080536912751678]
Validation precision: 0.6813186813186813
Validation recall: 0.2080536912751678
Validation f1: 0.3187660668380463
Validation roc_auc: 0.49159333314767883
Validation avg_accuracy: 0.5889853518616502
Validation one_indexed_epoch: 13
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 5 epochs
316/316 - 569s - loss: 0.3221 - accuracy: 0.8535 - 569s/epoch - 2s/step
Epoch 14/25
Validation cm: [[732 232]
 [147 151]]
Validation normalized_cm: [[0.759 0.241]
 [0.493 0.507]]
Validation acc: 0.6996830427892234
Validation class_accuracies: [0.7593360995850622, 0.5067114093959731]
Validation precision: 0.39425587467362927
Validation recall: 0.5067114093959731
Validation f1: 0.44346549192364176
Validation roc_auc: 0.7136337686930853
Validation avg_accuracy: 0.6330237544905177
Validation one_indexed_epoch: 14
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 6 epochs
316/316 - 572s - loss: 0.3198 - accuracy: 0.8506 - 572s/epoch - 2s/step
Epoch 15/25
Validation cm: [[927  37]
 [239  59]]
Validation normalized_cm: [[0.962 0.038]
 [0.802 0.198]]
Validation acc: 0.7812995245641838
Validation class_accuracies: [0.9616182572614108, 0.19798657718120805]
Validation precision: 0.6145833333333334
Validation recall: 0.19798657718120805
Validation f1: 0.29949238578680204
Validation roc_auc: 0.5791758333565402
Validation avg_accuracy: 0.5798024172213094
Validation one_indexed_epoch: 15
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 7 epochs
316/316 - 563s - loss: 0.3091 - accuracy: 0.8599 - 563s/epoch - 2s/step
Epoch 16/25
Validation cm: [[925  39]
 [187 111]]
Validation normalized_cm: [[0.96  0.04 ]
 [0.628 0.372]]
Validation acc: 0.820919175911252
Validation class_accuracies: [0.9595435684647303, 0.3724832214765101]
Validation precision: 0.74
Validation recall: 0.3724832214765101
Validation f1: 0.49553571428571425
Validation roc_auc: 0.6925318165362444
Validation avg_accuracy: 0.6660133949706202
Validation one_indexed_epoch: 16
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 8 epochs
316/316 - 588s - loss: 0.3012 - accuracy: 0.8654 - 588s/epoch - 2s/step
Epoch 17/25
Validation cm: [[924  40]
 [198 100]]
Validation normalized_cm: [[0.959 0.041]
 [0.664 0.336]]
Validation acc: 0.8114104595879557
Validation class_accuracies: [0.9585062240663901, 0.33557046979865773]
Validation precision: 0.7142857142857143
Validation recall: 0.33557046979865773
Validation f1: 0.45662100456621
Validation roc_auc: 0.7013457629006656
Validation avg_accuracy: 0.6470383469325239
Validation one_indexed_epoch: 17
The validation tracker metric at 0.7255562672310563 hasn't increased by 0 in 9 epochs
316/316 - 595s - loss: 0.2801 - accuracy: 0.8726 - 595s/epoch - 2s/step
Epoch 18/25
Validation cm: [[923  41]
 [209  89]]
Validation normalized_cm: [[0.957 0.043]
 [0.701 0.299]]
Validation acc: 0.8019017432646592
Validation class_accuracies: [0.9574688796680498, 0.2986577181208054]
Validation precision: 0.6846153846153846
Validation recall: 0.2986577181208054
Validation f1: 0.4158878504672897
Validation roc_auc: 0.8165449469492329
Validation avg_accuracy: 0.6280632988944276
Validation one_indexed_epoch: 18
The number of epochs since last 1% equals the patience
316/316 - 669s - loss: 0.2806 - accuracy: 0.8728 - 669s/epoch - 2s/step
----------------------------------
The best metrics for this job are: 

Best avg_accuracy: 0.7255562672310563
Best cm: [[836 128]
 [124 174]]
Best normalized_cm: [[0.867 0.133]
 [0.416 0.584]]
Best acc: 0.8003169572107766
Best class_accuracies: [0.8672199170124482, 0.5838926174496645]
Best precision: 0.5761589403973509
Best recall: 0.5838926174496645
Best f1: 0.58
Best roc_auc: 0.8353650895318722
Best one_indexed_epoch: 8
Best patient_cm: [[655  38]
 [ 30  17]]
avg_accuracy
model
cm
normalized_cm
acc
class_accuracies
precision
recall
f1
roc_auc
one_indexed_epoch
patient_cm
Initial weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[1.574e-02, 1.503e+02],
       [2.567e-02, 9.589e+01],
       [4.295e-02, 1.503e+02],
       [2.699e-02, 1.502e+02],
       [5.779e-02, 1.503e+02],
       [1.182e-01, 9.588e+01],
       [9.582e-02, 9.561e+01],
       [9.039e-02, 9.559e+01],
       [8.773e-02, 9.541e+01],
       [1.373e-01, 9.559e+01],
       [1.518e-01, 9.574e+01],
       [2.202e-01, 9.590e+01],
       [1.727e-01, 9.598e+01],
       [2.067e-01, 9.597e+01],
       [1.837e-01, 9.619e+01],
       [2.264e-01, 9.588e+01],
       [1.971e-01, 1.503e+02],
       [2.348e-01, 9.569e+01],
       [2.650e-01, 9.607e+01],
       [2.612e-01, 9.614e+01],
       [2.978e-01, 9.599e+01],
       [2.896e-01, 9.619e+01],
       [3.118e-01, 9.592e+01],
       [3.577e-01, 9.608e+01],
       [3.577e-01, 6.400e+01],
       [3.188e-01, 9.629e+01],
       [4.215e-01, 6.392e+01],
       [4.540e-01, 9.624e+01],
       [4.122e-01, 6.404e+01],
       [4.587e-01, 6.409e+01],
       [4.781e-01, 6.417e+01],
       [5.073e-01, 6.407e+01],
       [5.854e-01, 6.398e+01],
       [5.483e-01, 6.401e+01],
       [5.609e-01, 6.393e+01],
       [5.053e-01, 6.394e+01],
       [6.278e-01, 6.395e+01],
       [6.798e-01, 6.388e+01],
       [6.701e-01, 4.779e+01],
       [7.632e-01, 4.789e+01],
       [7.564e-01, 4.781e+01],
       [7.834e-01, 4.792e+01],
       [8.417e-01, 4.804e+01],
       [9.075e-01, 4.803e+01],
       [8.415e-01, 4.797e+01],
       [8.606e-01, 4.782e+01],
       [8.954e-01, 4.797e+01],
       [9.931e-01, 3.844e+01],
       [9.985e-01, 3.840e+01],
       [1.103e+00, 3.855e+01],
       [1.198e+00, 3.850e+01],
       [1.176e+00, 3.851e+01],
       [1.187e+00, 3.195e+01],
       [1.201e+00, 3.199e+01],
       [1.226e+00, 3.834e+01],
       [1.300e+00, 3.195e+01],
       [1.386e+00, 3.211e+01],
       [1.448e+00, 3.208e+01],
       [1.445e+00, 2.756e+01],
       [1.553e+00, 2.750e+01],
       [1.579e+00, 3.204e+01],
       [1.625e+00, 2.753e+01],
       [1.731e+00, 2.749e+01],
       [1.800e+00, 2.413e+01],
       [1.811e+00, 2.399e+01],
       [1.818e+00, 2.404e+01],
       [1.871e+00, 2.398e+01],
       [1.984e+00, 2.413e+01],
       [1.984e+00, 2.133e+01],
       [2.199e+00, 2.134e+01],
       [2.217e+00, 1.920e+01],
       [2.248e+00, 1.918e+01],
       [2.419e+00, 2.139e+01],
       [2.457e+00, 1.919e+01],
       [2.538e+00, 1.923e+01],
       [2.536e+00, 1.746e+01],
       [2.725e+00, 1.752e+01],
       [2.851e+00, 1.601e+01],
       [2.880e+00, 1.750e+01],
       [3.120e+00, 1.616e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.5  ],
         [0.5  ],
         [0.5  ],
         [0.49 ],
         [0.488],
         [0.472],
         [0.457],
         [0.445],
         [0.454],
         [0.441],
         [0.434],
         [0.445],
         [0.438],
         [0.427],
         [0.424],
         [0.407],
         [0.415],
         [0.41 ],
         [0.429],
         [0.432],
         [0.413],
         [0.413],
         [0.41 ],
         [0.398],
         [0.384],
         [0.399],
         [0.393],
         [0.42 ],
         [0.392],
         [0.4  ],
         [0.391],
         [0.393],
         [0.422],
         [0.414],
         [0.422],
         [0.417],
         [0.427],
         [0.425],
         [0.432],
         [0.414],
         [0.42 ],
         [0.424],
         [0.412],
         [0.409],
         [0.414],
         [0.411],
         [0.41 ],
         [0.397],
         [0.402],
         [0.394],
         [0.399],
         [0.398],
         [0.415],
         [0.408],
         [0.406],
         [0.407],
         [0.398],
         [0.403],
         [0.396],
         [0.399],
         [0.399],
         [0.409],
         [0.393],
         [0.395],
         [0.404],
         [0.398],
         [0.403],
         [0.397],
         [0.402],
         [0.401],
         [0.401],
         [0.403],
         [0.398],
         [0.406],
         [0.4  ],
         [0.402],
         [0.401],
         [0.401],
         [0.394],
         [0.397]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([1.   , 1.   , 1.   , 1.   , 1.   , 1.   , 0.989, 0.985, 0.985,
       0.977, 0.978, 0.981, 0.976, 0.981, 0.971, 0.98 , 0.962, 0.975,
       0.959, 0.954, 0.957, 0.957, 0.957, 0.957, 0.961, 0.955, 0.956,
       0.946, 0.958, 0.953, 0.963, 0.961, 0.959, 0.955, 0.951, 0.957,
       0.958, 0.958, 0.956, 0.959, 0.958, 0.96 , 0.958, 0.964, 0.953,
       0.957, 0.945, 0.957, 0.943, 0.939, 0.955, 0.958, 0.954, 0.958,
       0.948, 0.952, 0.957, 0.951, 0.951, 0.945, 0.942, 0.958, 0.941,
       0.945, 0.956, 0.94 , 0.938, 0.947, 0.958, 0.953, 0.944, 0.95 ,
       0.938, 0.939, 0.952, 0.939, 0.954, 0.942, 0.94 , 0.949],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([1.745, 1.803, 1.807, 1.813, 1.824, 1.867, 1.896, 1.904, 1.919,
       1.939, 1.936, 1.947, 1.956, 1.957, 1.973, 1.967, 1.992, 1.981,
       1.994, 2.002, 2.   , 2.001, 2.004, 2.004, 1.999, 2.007, 2.004,
       2.014, 2.003, 2.007, 1.997, 2.   , 2.001, 2.006, 2.009, 2.004,
       2.003, 2.002, 2.004, 2.001, 2.002, 1.999, 2.002, 1.996, 2.007,
       2.003, 2.014, 2.003, 2.017, 2.021, 2.005, 2.002, 2.006, 2.001,
       2.012, 2.008, 2.002, 2.009, 2.009, 2.015, 2.018, 2.001, 2.019,
       2.015, 2.004, 2.02 , 2.021, 2.012, 2.002, 2.007, 2.015, 2.01 ,
       2.022, 2.021, 2.008, 2.021, 2.006, 2.018, 2.02 , 2.011],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.86 , 1.906, 1.903, 1.904, 1.913, 1.95 , 1.964, 1.975, 1.973,
       1.996, 1.985, 1.989, 1.994, 1.986, 1.996, 1.995, 2.017, 2.003,
       2.011, 2.011, 2.011, 2.01 , 2.02 , 2.015, 2.005, 2.017, 2.01 ,
       2.025, 2.01 , 2.014, 2.006, 2.009, 2.007, 2.015, 2.015, 2.015,
       2.011, 2.007, 2.013, 2.009, 2.011, 2.007, 2.008, 1.998, 2.011,
       2.006, 2.016, 2.005, 2.019, 2.023, 2.009, 2.006, 2.012, 2.009,
       2.016, 2.012, 2.006, 2.011, 2.011, 2.017, 2.019, 2.004, 2.018,
       2.014, 2.005, 2.02 , 2.024, 2.015, 2.006, 2.01 , 2.018, 2.012,
       2.022, 2.021, 2.008, 2.021, 2.007, 2.018, 2.02 , 2.013],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.106, 0.097, 0.098, 0.098, 0.098, 0.091, 0.083, 0.081, 0.082,
       0.078, 0.079, 0.077, 0.079, 0.079, 0.077, 0.076, 0.069, 0.074,
       0.071, 0.07 , 0.073, 0.079, 0.071, 0.07 , 0.072, 0.069, 0.066,
       0.06 , 0.066, 0.065, 0.07 , 0.067, 0.074, 0.067, 0.066, 0.067,
       0.068, 0.069, 0.066, 0.063, 0.062, 0.064, 0.065, 0.062, 0.064,
       0.062, 0.054, 0.062, 0.056, 0.053, 0.054, 0.055, 0.053, 0.055,
       0.051, 0.05 , 0.055, 0.052, 0.053, 0.049, 0.047, 0.056, 0.049,
       0.051, 0.052, 0.046, 0.048, 0.048, 0.052, 0.05 , 0.045, 0.049,
       0.048, 0.049, 0.052, 0.051, 0.053, 0.051, 0.045, 0.049],
      dtype=float32)>]
Post training weights
[<tf.Variable 'kernel:0' shape=(80, 2) dtype=float32, numpy=
array([[1.574e-02, 1.503e+02],
       [2.567e-02, 9.589e+01],
       [4.295e-02, 1.503e+02],
       [2.699e-02, 1.502e+02],
       [5.779e-02, 1.503e+02],
       [1.182e-01, 9.588e+01],
       [9.582e-02, 9.561e+01],
       [9.039e-02, 9.559e+01],
       [8.773e-02, 9.541e+01],
       [1.373e-01, 9.559e+01],
       [1.518e-01, 9.574e+01],
       [2.202e-01, 9.590e+01],
       [1.727e-01, 9.598e+01],
       [2.067e-01, 9.597e+01],
       [1.837e-01, 9.619e+01],
       [2.264e-01, 9.588e+01],
       [1.971e-01, 1.503e+02],
       [2.348e-01, 9.569e+01],
       [2.650e-01, 9.607e+01],
       [2.612e-01, 9.614e+01],
       [2.978e-01, 9.599e+01],
       [2.896e-01, 9.619e+01],
       [3.118e-01, 9.592e+01],
       [3.577e-01, 9.608e+01],
       [3.577e-01, 6.400e+01],
       [3.188e-01, 9.629e+01],
       [4.215e-01, 6.392e+01],
       [4.540e-01, 9.624e+01],
       [4.122e-01, 6.404e+01],
       [4.587e-01, 6.409e+01],
       [4.781e-01, 6.417e+01],
       [5.073e-01, 6.407e+01],
       [5.854e-01, 6.398e+01],
       [5.483e-01, 6.401e+01],
       [5.609e-01, 6.393e+01],
       [5.053e-01, 6.394e+01],
       [6.278e-01, 6.395e+01],
       [6.798e-01, 6.388e+01],
       [6.701e-01, 4.779e+01],
       [7.632e-01, 4.789e+01],
       [7.564e-01, 4.781e+01],
       [7.834e-01, 4.792e+01],
       [8.417e-01, 4.804e+01],
       [9.075e-01, 4.803e+01],
       [8.415e-01, 4.797e+01],
       [8.606e-01, 4.782e+01],
       [8.954e-01, 4.797e+01],
       [9.931e-01, 3.844e+01],
       [9.985e-01, 3.840e+01],
       [1.103e+00, 3.855e+01],
       [1.198e+00, 3.850e+01],
       [1.176e+00, 3.851e+01],
       [1.187e+00, 3.195e+01],
       [1.201e+00, 3.199e+01],
       [1.226e+00, 3.834e+01],
       [1.300e+00, 3.195e+01],
       [1.386e+00, 3.211e+01],
       [1.448e+00, 3.208e+01],
       [1.445e+00, 2.756e+01],
       [1.553e+00, 2.750e+01],
       [1.579e+00, 3.204e+01],
       [1.625e+00, 2.753e+01],
       [1.731e+00, 2.749e+01],
       [1.800e+00, 2.413e+01],
       [1.811e+00, 2.399e+01],
       [1.818e+00, 2.404e+01],
       [1.871e+00, 2.398e+01],
       [1.984e+00, 2.413e+01],
       [1.984e+00, 2.133e+01],
       [2.199e+00, 2.134e+01],
       [2.217e+00, 1.920e+01],
       [2.248e+00, 1.918e+01],
       [2.419e+00, 2.139e+01],
       [2.457e+00, 1.919e+01],
       [2.538e+00, 1.923e+01],
       [2.536e+00, 1.746e+01],
       [2.725e+00, 1.752e+01],
       [2.851e+00, 1.601e+01],
       [2.880e+00, 1.750e+01],
       [3.120e+00, 1.616e+01]], dtype=float32)>, <tf.Variable 'leaf/learnable_pooling/kernel:0' shape=(1, 1, 80, 1) dtype=float32, numpy=
array([[[[0.5  ],
         [0.5  ],
         [0.5  ],
         [0.49 ],
         [0.488],
         [0.472],
         [0.457],
         [0.445],
         [0.454],
         [0.441],
         [0.434],
         [0.445],
         [0.438],
         [0.427],
         [0.424],
         [0.407],
         [0.415],
         [0.41 ],
         [0.429],
         [0.432],
         [0.413],
         [0.413],
         [0.41 ],
         [0.398],
         [0.384],
         [0.399],
         [0.393],
         [0.42 ],
         [0.392],
         [0.4  ],
         [0.391],
         [0.393],
         [0.422],
         [0.414],
         [0.422],
         [0.417],
         [0.427],
         [0.425],
         [0.432],
         [0.414],
         [0.42 ],
         [0.424],
         [0.412],
         [0.409],
         [0.414],
         [0.411],
         [0.41 ],
         [0.397],
         [0.402],
         [0.394],
         [0.399],
         [0.398],
         [0.415],
         [0.408],
         [0.406],
         [0.407],
         [0.398],
         [0.403],
         [0.396],
         [0.399],
         [0.399],
         [0.409],
         [0.393],
         [0.395],
         [0.404],
         [0.398],
         [0.403],
         [0.397],
         [0.402],
         [0.401],
         [0.401],
         [0.403],
         [0.398],
         [0.406],
         [0.4  ],
         [0.402],
         [0.401],
         [0.401],
         [0.394],
         [0.397]]]], dtype=float32)>, <tf.Variable 'leaf/PCEN/alpha:0' shape=(80,) dtype=float32, numpy=
array([1.   , 1.   , 1.   , 1.   , 1.   , 1.   , 0.989, 0.985, 0.985,
       0.977, 0.978, 0.981, 0.976, 0.981, 0.971, 0.98 , 0.962, 0.975,
       0.959, 0.954, 0.957, 0.957, 0.957, 0.957, 0.961, 0.955, 0.956,
       0.946, 0.958, 0.953, 0.963, 0.961, 0.959, 0.955, 0.951, 0.957,
       0.958, 0.958, 0.956, 0.959, 0.958, 0.96 , 0.958, 0.964, 0.953,
       0.957, 0.945, 0.957, 0.943, 0.939, 0.955, 0.958, 0.954, 0.958,
       0.948, 0.952, 0.957, 0.951, 0.951, 0.945, 0.942, 0.958, 0.941,
       0.945, 0.956, 0.94 , 0.938, 0.947, 0.958, 0.953, 0.944, 0.95 ,
       0.938, 0.939, 0.952, 0.939, 0.954, 0.942, 0.94 , 0.949],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/delta:0' shape=(80,) dtype=float32, numpy=
array([1.745, 1.803, 1.807, 1.813, 1.824, 1.867, 1.896, 1.904, 1.919,
       1.939, 1.936, 1.947, 1.956, 1.957, 1.973, 1.967, 1.992, 1.981,
       1.994, 2.002, 2.   , 2.001, 2.004, 2.004, 1.999, 2.007, 2.004,
       2.014, 2.003, 2.007, 1.997, 2.   , 2.001, 2.006, 2.009, 2.004,
       2.003, 2.002, 2.004, 2.001, 2.002, 1.999, 2.002, 1.996, 2.007,
       2.003, 2.014, 2.003, 2.017, 2.021, 2.005, 2.002, 2.006, 2.001,
       2.012, 2.008, 2.002, 2.009, 2.009, 2.015, 2.018, 2.001, 2.019,
       2.015, 2.004, 2.02 , 2.021, 2.012, 2.002, 2.007, 2.015, 2.01 ,
       2.022, 2.021, 2.008, 2.021, 2.006, 2.018, 2.02 , 2.011],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/root:0' shape=(80,) dtype=float32, numpy=
array([1.86 , 1.906, 1.903, 1.904, 1.913, 1.95 , 1.964, 1.975, 1.973,
       1.996, 1.985, 1.989, 1.994, 1.986, 1.996, 1.995, 2.017, 2.003,
       2.011, 2.011, 2.011, 2.01 , 2.02 , 2.015, 2.005, 2.017, 2.01 ,
       2.025, 2.01 , 2.014, 2.006, 2.009, 2.007, 2.015, 2.015, 2.015,
       2.011, 2.007, 2.013, 2.009, 2.011, 2.007, 2.008, 1.998, 2.011,
       2.006, 2.016, 2.005, 2.019, 2.023, 2.009, 2.006, 2.012, 2.009,
       2.016, 2.012, 2.006, 2.011, 2.011, 2.017, 2.019, 2.004, 2.018,
       2.014, 2.005, 2.02 , 2.024, 2.015, 2.006, 2.01 , 2.018, 2.012,
       2.022, 2.021, 2.008, 2.021, 2.007, 2.018, 2.02 , 2.013],
      dtype=float32)>, <tf.Variable 'leaf/PCEN/EMA/smooth:0' shape=(80,) dtype=float32, numpy=
array([0.106, 0.097, 0.098, 0.098, 0.098, 0.091, 0.083, 0.081, 0.082,
       0.078, 0.079, 0.077, 0.079, 0.079, 0.077, 0.076, 0.069, 0.074,
       0.071, 0.07 , 0.073, 0.079, 0.071, 0.07 , 0.072, 0.069, 0.066,
       0.06 , 0.066, 0.065, 0.07 , 0.067, 0.074, 0.067, 0.066, 0.067,
       0.068, 0.069, 0.066, 0.063, 0.062, 0.064, 0.065, 0.062, 0.064,
       0.062, 0.054, 0.062, 0.056, 0.053, 0.054, 0.055, 0.053, 0.055,
       0.051, 0.05 , 0.055, 0.052, 0.053, 0.049, 0.047, 0.056, 0.049,
       0.051, 0.052, 0.046, 0.048, 0.048, 0.052, 0.05 , 0.045, 0.049,
       0.048, 0.049, 0.052, 0.051, 0.053, 0.051, 0.045, 0.049],
      dtype=float32)>]/home/alirachidi/anaconda3/envs/LungSoundClass/lib/python3.7/site-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/home/alirachidi/classification_algorithm/trainers/modules/main/global_helpers.py:48: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
  plt.show()
/home/alirachidi/classification_algorithm/trainers/modules/callbacks/visualizationCallback.py:32: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  print(np.array(self.model._frontend.weights) - np.array(self.first_weights))

Weight difference
[<tf.Tensor: shape=(80, 2), dtype=float32, numpy=
 array([[0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.],
        [0., 0.]], dtype=float32)>
 <tf.Tensor: shape=(1, 1, 80, 1), dtype=float32, numpy=
 array([[[[0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.],
          [0.]]]], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>
 <tf.Tensor: shape=(80,), dtype=float32, numpy=
 array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>   ]
